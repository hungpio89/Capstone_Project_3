// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/01/2024 02:33:09"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    AHB_APB_UART
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module AHB_APB_UART_vlg_sample_tst(
	HBURST,
	HCLK,
	HREADYin,
	HRESETn,
	HSELABPif,
	HSIZES,
	HTRANS,
	HWDATA,
	HWRITE,
	UARTCLK,
	UART_RXD,
	ctrl_i,
	desired_baud_rate,
	fifo_en,
	number_data_receive,
	number_data_trans,
	parity_bit_mode,
	state_isr,
	stop_bit_twice,
	uart_mode_clk_sel,
	sampler_tx
);
input [2:0] HBURST;
input  HCLK;
input  HREADYin;
input  HRESETn;
input  HSELABPif;
input [2:0] HSIZES;
input [1:0] HTRANS;
input [31:0] HWDATA;
input  HWRITE;
input  UARTCLK;
input  UART_RXD;
input [6:0] ctrl_i;
input [19:0] desired_baud_rate;
input [1:0] fifo_en;
input [3:0] number_data_receive;
input [3:0] number_data_trans;
input  parity_bit_mode;
input [1:0] state_isr;
input  stop_bit_twice;
input  uart_mode_clk_sel;
output sampler_tx;

reg sample;
time current_time;
always @(HBURST or HCLK or HREADYin or HRESETn or HSELABPif or HSIZES or HTRANS or HWDATA or HWRITE or UARTCLK or UART_RXD or ctrl_i or desired_baud_rate or fifo_en or number_data_receive or number_data_trans or parity_bit_mode or state_isr or stop_bit_twice or uart_mode_clk_sel)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module AHB_APB_UART_vlg_check_tst (
	HRDATA,
	HREADYout,
	HRESP,
	UART_TXD,
	sampler_rx
);
input [31:0] HRDATA;
input  HREADYout;
input [1:0] HRESP;
input  UART_TXD;
input sampler_rx;

reg [31:0] HRDATA_expected;
reg  HREADYout_expected;
reg [1:0] HRESP_expected;
reg  UART_TXD_expected;

reg [31:0] HRDATA_prev;
reg  HREADYout_prev;
reg [1:0] HRESP_prev;
reg  UART_TXD_prev;

reg [31:0] HRDATA_expected_prev;
reg  HREADYout_expected_prev;
reg [1:0] HRESP_expected_prev;
reg  UART_TXD_expected_prev;

reg [31:0] last_HRDATA_exp;
reg  last_HREADYout_exp;
reg [1:0] last_HRESP_exp;
reg  last_UART_TXD_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:4] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 4'b1;
end

// update real /o prevs

always @(trigger)
begin
	HRDATA_prev = HRDATA;
	HREADYout_prev = HREADYout;
	HRESP_prev = HRESP;
	UART_TXD_prev = UART_TXD;
end

// update expected /o prevs

always @(trigger)
begin
	HRDATA_expected_prev = HRDATA_expected;
	HREADYout_expected_prev = HREADYout_expected;
	HRESP_expected_prev = HRESP_expected;
	UART_TXD_expected_prev = UART_TXD_expected;
end


// expected HRDATA[ 31 ]
initial
begin
	HRDATA_expected[31] = 1'bX;
end 
// expected HRDATA[ 30 ]
initial
begin
	HRDATA_expected[30] = 1'bX;
end 
// expected HRDATA[ 29 ]
initial
begin
	HRDATA_expected[29] = 1'bX;
end 
// expected HRDATA[ 28 ]
initial
begin
	HRDATA_expected[28] = 1'bX;
end 
// expected HRDATA[ 27 ]
initial
begin
	HRDATA_expected[27] = 1'bX;
end 
// expected HRDATA[ 26 ]
initial
begin
	HRDATA_expected[26] = 1'bX;
end 
// expected HRDATA[ 25 ]
initial
begin
	HRDATA_expected[25] = 1'bX;
end 
// expected HRDATA[ 24 ]
initial
begin
	HRDATA_expected[24] = 1'bX;
end 
// expected HRDATA[ 23 ]
initial
begin
	HRDATA_expected[23] = 1'bX;
end 
// expected HRDATA[ 22 ]
initial
begin
	HRDATA_expected[22] = 1'bX;
end 
// expected HRDATA[ 21 ]
initial
begin
	HRDATA_expected[21] = 1'bX;
end 
// expected HRDATA[ 20 ]
initial
begin
	HRDATA_expected[20] = 1'bX;
end 
// expected HRDATA[ 19 ]
initial
begin
	HRDATA_expected[19] = 1'bX;
end 
// expected HRDATA[ 18 ]
initial
begin
	HRDATA_expected[18] = 1'bX;
end 
// expected HRDATA[ 17 ]
initial
begin
	HRDATA_expected[17] = 1'bX;
end 
// expected HRDATA[ 16 ]
initial
begin
	HRDATA_expected[16] = 1'bX;
end 
// expected HRDATA[ 15 ]
initial
begin
	HRDATA_expected[15] = 1'bX;
end 
// expected HRDATA[ 14 ]
initial
begin
	HRDATA_expected[14] = 1'bX;
end 
// expected HRDATA[ 13 ]
initial
begin
	HRDATA_expected[13] = 1'bX;
end 
// expected HRDATA[ 12 ]
initial
begin
	HRDATA_expected[12] = 1'bX;
end 
// expected HRDATA[ 11 ]
initial
begin
	HRDATA_expected[11] = 1'bX;
end 
// expected HRDATA[ 10 ]
initial
begin
	HRDATA_expected[10] = 1'bX;
end 
// expected HRDATA[ 9 ]
initial
begin
	HRDATA_expected[9] = 1'bX;
end 
// expected HRDATA[ 8 ]
initial
begin
	HRDATA_expected[8] = 1'bX;
end 
// expected HRDATA[ 7 ]
initial
begin
	HRDATA_expected[7] = 1'bX;
end 
// expected HRDATA[ 6 ]
initial
begin
	HRDATA_expected[6] = 1'bX;
end 
// expected HRDATA[ 5 ]
initial
begin
	HRDATA_expected[5] = 1'bX;
end 
// expected HRDATA[ 4 ]
initial
begin
	HRDATA_expected[4] = 1'bX;
end 
// expected HRDATA[ 3 ]
initial
begin
	HRDATA_expected[3] = 1'bX;
end 
// expected HRDATA[ 2 ]
initial
begin
	HRDATA_expected[2] = 1'bX;
end 
// expected HRDATA[ 1 ]
initial
begin
	HRDATA_expected[1] = 1'bX;
end 
// expected HRDATA[ 0 ]
initial
begin
	HRDATA_expected[0] = 1'bX;
end 

// expected UART_TXD
initial
begin
	UART_TXD_expected = 1'bX;
end 

// expected HREADYout
initial
begin
	HREADYout_expected = 1'bX;
end 
// expected HRESP[ 1 ]
initial
begin
	HRESP_expected[1] = 1'bX;
end 
// expected HRESP[ 0 ]
initial
begin
	HRESP_expected[0] = 1'bX;
end 
// generate trigger
always @(HRDATA_expected or HRDATA or HREADYout_expected or HREADYout or HRESP_expected or HRESP or UART_TXD_expected or UART_TXD)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected HRDATA = %b | expected HREADYout = %b | expected HRESP = %b | expected UART_TXD = %b | ",HRDATA_expected_prev,HREADYout_expected_prev,HRESP_expected_prev,UART_TXD_expected_prev);
	$display("| real HRDATA = %b | real HREADYout = %b | real HRESP = %b | real UART_TXD = %b | ",HRDATA_prev,HREADYout_prev,HRESP_prev,UART_TXD_prev);
`endif
	if (
		( HRDATA_expected_prev[0] !== 1'bx ) && ( HRDATA_prev[0] !== HRDATA_expected_prev[0] )
		&& ((HRDATA_expected_prev[0] !== last_HRDATA_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HRDATA[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HRDATA_expected_prev);
		$display ("     Real value = %b", HRDATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_HRDATA_exp[0] = HRDATA_expected_prev[0];
	end
	if (
		( HRDATA_expected_prev[1] !== 1'bx ) && ( HRDATA_prev[1] !== HRDATA_expected_prev[1] )
		&& ((HRDATA_expected_prev[1] !== last_HRDATA_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HRDATA[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HRDATA_expected_prev);
		$display ("     Real value = %b", HRDATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_HRDATA_exp[1] = HRDATA_expected_prev[1];
	end
	if (
		( HRDATA_expected_prev[2] !== 1'bx ) && ( HRDATA_prev[2] !== HRDATA_expected_prev[2] )
		&& ((HRDATA_expected_prev[2] !== last_HRDATA_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HRDATA[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HRDATA_expected_prev);
		$display ("     Real value = %b", HRDATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_HRDATA_exp[2] = HRDATA_expected_prev[2];
	end
	if (
		( HRDATA_expected_prev[3] !== 1'bx ) && ( HRDATA_prev[3] !== HRDATA_expected_prev[3] )
		&& ((HRDATA_expected_prev[3] !== last_HRDATA_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HRDATA[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HRDATA_expected_prev);
		$display ("     Real value = %b", HRDATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_HRDATA_exp[3] = HRDATA_expected_prev[3];
	end
	if (
		( HRDATA_expected_prev[4] !== 1'bx ) && ( HRDATA_prev[4] !== HRDATA_expected_prev[4] )
		&& ((HRDATA_expected_prev[4] !== last_HRDATA_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HRDATA[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HRDATA_expected_prev);
		$display ("     Real value = %b", HRDATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_HRDATA_exp[4] = HRDATA_expected_prev[4];
	end
	if (
		( HRDATA_expected_prev[5] !== 1'bx ) && ( HRDATA_prev[5] !== HRDATA_expected_prev[5] )
		&& ((HRDATA_expected_prev[5] !== last_HRDATA_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HRDATA[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HRDATA_expected_prev);
		$display ("     Real value = %b", HRDATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_HRDATA_exp[5] = HRDATA_expected_prev[5];
	end
	if (
		( HRDATA_expected_prev[6] !== 1'bx ) && ( HRDATA_prev[6] !== HRDATA_expected_prev[6] )
		&& ((HRDATA_expected_prev[6] !== last_HRDATA_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HRDATA[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HRDATA_expected_prev);
		$display ("     Real value = %b", HRDATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_HRDATA_exp[6] = HRDATA_expected_prev[6];
	end
	if (
		( HRDATA_expected_prev[7] !== 1'bx ) && ( HRDATA_prev[7] !== HRDATA_expected_prev[7] )
		&& ((HRDATA_expected_prev[7] !== last_HRDATA_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HRDATA[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HRDATA_expected_prev);
		$display ("     Real value = %b", HRDATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_HRDATA_exp[7] = HRDATA_expected_prev[7];
	end
	if (
		( HRDATA_expected_prev[8] !== 1'bx ) && ( HRDATA_prev[8] !== HRDATA_expected_prev[8] )
		&& ((HRDATA_expected_prev[8] !== last_HRDATA_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HRDATA[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HRDATA_expected_prev);
		$display ("     Real value = %b", HRDATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_HRDATA_exp[8] = HRDATA_expected_prev[8];
	end
	if (
		( HRDATA_expected_prev[9] !== 1'bx ) && ( HRDATA_prev[9] !== HRDATA_expected_prev[9] )
		&& ((HRDATA_expected_prev[9] !== last_HRDATA_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HRDATA[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HRDATA_expected_prev);
		$display ("     Real value = %b", HRDATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_HRDATA_exp[9] = HRDATA_expected_prev[9];
	end
	if (
		( HRDATA_expected_prev[10] !== 1'bx ) && ( HRDATA_prev[10] !== HRDATA_expected_prev[10] )
		&& ((HRDATA_expected_prev[10] !== last_HRDATA_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HRDATA[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HRDATA_expected_prev);
		$display ("     Real value = %b", HRDATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_HRDATA_exp[10] = HRDATA_expected_prev[10];
	end
	if (
		( HRDATA_expected_prev[11] !== 1'bx ) && ( HRDATA_prev[11] !== HRDATA_expected_prev[11] )
		&& ((HRDATA_expected_prev[11] !== last_HRDATA_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HRDATA[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HRDATA_expected_prev);
		$display ("     Real value = %b", HRDATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_HRDATA_exp[11] = HRDATA_expected_prev[11];
	end
	if (
		( HRDATA_expected_prev[12] !== 1'bx ) && ( HRDATA_prev[12] !== HRDATA_expected_prev[12] )
		&& ((HRDATA_expected_prev[12] !== last_HRDATA_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HRDATA[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HRDATA_expected_prev);
		$display ("     Real value = %b", HRDATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_HRDATA_exp[12] = HRDATA_expected_prev[12];
	end
	if (
		( HRDATA_expected_prev[13] !== 1'bx ) && ( HRDATA_prev[13] !== HRDATA_expected_prev[13] )
		&& ((HRDATA_expected_prev[13] !== last_HRDATA_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HRDATA[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HRDATA_expected_prev);
		$display ("     Real value = %b", HRDATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_HRDATA_exp[13] = HRDATA_expected_prev[13];
	end
	if (
		( HRDATA_expected_prev[14] !== 1'bx ) && ( HRDATA_prev[14] !== HRDATA_expected_prev[14] )
		&& ((HRDATA_expected_prev[14] !== last_HRDATA_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HRDATA[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HRDATA_expected_prev);
		$display ("     Real value = %b", HRDATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_HRDATA_exp[14] = HRDATA_expected_prev[14];
	end
	if (
		( HRDATA_expected_prev[15] !== 1'bx ) && ( HRDATA_prev[15] !== HRDATA_expected_prev[15] )
		&& ((HRDATA_expected_prev[15] !== last_HRDATA_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HRDATA[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HRDATA_expected_prev);
		$display ("     Real value = %b", HRDATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_HRDATA_exp[15] = HRDATA_expected_prev[15];
	end
	if (
		( HRDATA_expected_prev[16] !== 1'bx ) && ( HRDATA_prev[16] !== HRDATA_expected_prev[16] )
		&& ((HRDATA_expected_prev[16] !== last_HRDATA_exp[16]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HRDATA[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HRDATA_expected_prev);
		$display ("     Real value = %b", HRDATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_HRDATA_exp[16] = HRDATA_expected_prev[16];
	end
	if (
		( HRDATA_expected_prev[17] !== 1'bx ) && ( HRDATA_prev[17] !== HRDATA_expected_prev[17] )
		&& ((HRDATA_expected_prev[17] !== last_HRDATA_exp[17]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HRDATA[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HRDATA_expected_prev);
		$display ("     Real value = %b", HRDATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_HRDATA_exp[17] = HRDATA_expected_prev[17];
	end
	if (
		( HRDATA_expected_prev[18] !== 1'bx ) && ( HRDATA_prev[18] !== HRDATA_expected_prev[18] )
		&& ((HRDATA_expected_prev[18] !== last_HRDATA_exp[18]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HRDATA[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HRDATA_expected_prev);
		$display ("     Real value = %b", HRDATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_HRDATA_exp[18] = HRDATA_expected_prev[18];
	end
	if (
		( HRDATA_expected_prev[19] !== 1'bx ) && ( HRDATA_prev[19] !== HRDATA_expected_prev[19] )
		&& ((HRDATA_expected_prev[19] !== last_HRDATA_exp[19]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HRDATA[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HRDATA_expected_prev);
		$display ("     Real value = %b", HRDATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_HRDATA_exp[19] = HRDATA_expected_prev[19];
	end
	if (
		( HRDATA_expected_prev[20] !== 1'bx ) && ( HRDATA_prev[20] !== HRDATA_expected_prev[20] )
		&& ((HRDATA_expected_prev[20] !== last_HRDATA_exp[20]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HRDATA[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HRDATA_expected_prev);
		$display ("     Real value = %b", HRDATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_HRDATA_exp[20] = HRDATA_expected_prev[20];
	end
	if (
		( HRDATA_expected_prev[21] !== 1'bx ) && ( HRDATA_prev[21] !== HRDATA_expected_prev[21] )
		&& ((HRDATA_expected_prev[21] !== last_HRDATA_exp[21]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HRDATA[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HRDATA_expected_prev);
		$display ("     Real value = %b", HRDATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_HRDATA_exp[21] = HRDATA_expected_prev[21];
	end
	if (
		( HRDATA_expected_prev[22] !== 1'bx ) && ( HRDATA_prev[22] !== HRDATA_expected_prev[22] )
		&& ((HRDATA_expected_prev[22] !== last_HRDATA_exp[22]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HRDATA[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HRDATA_expected_prev);
		$display ("     Real value = %b", HRDATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_HRDATA_exp[22] = HRDATA_expected_prev[22];
	end
	if (
		( HRDATA_expected_prev[23] !== 1'bx ) && ( HRDATA_prev[23] !== HRDATA_expected_prev[23] )
		&& ((HRDATA_expected_prev[23] !== last_HRDATA_exp[23]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HRDATA[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HRDATA_expected_prev);
		$display ("     Real value = %b", HRDATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_HRDATA_exp[23] = HRDATA_expected_prev[23];
	end
	if (
		( HRDATA_expected_prev[24] !== 1'bx ) && ( HRDATA_prev[24] !== HRDATA_expected_prev[24] )
		&& ((HRDATA_expected_prev[24] !== last_HRDATA_exp[24]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HRDATA[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HRDATA_expected_prev);
		$display ("     Real value = %b", HRDATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_HRDATA_exp[24] = HRDATA_expected_prev[24];
	end
	if (
		( HRDATA_expected_prev[25] !== 1'bx ) && ( HRDATA_prev[25] !== HRDATA_expected_prev[25] )
		&& ((HRDATA_expected_prev[25] !== last_HRDATA_exp[25]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HRDATA[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HRDATA_expected_prev);
		$display ("     Real value = %b", HRDATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_HRDATA_exp[25] = HRDATA_expected_prev[25];
	end
	if (
		( HRDATA_expected_prev[26] !== 1'bx ) && ( HRDATA_prev[26] !== HRDATA_expected_prev[26] )
		&& ((HRDATA_expected_prev[26] !== last_HRDATA_exp[26]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HRDATA[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HRDATA_expected_prev);
		$display ("     Real value = %b", HRDATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_HRDATA_exp[26] = HRDATA_expected_prev[26];
	end
	if (
		( HRDATA_expected_prev[27] !== 1'bx ) && ( HRDATA_prev[27] !== HRDATA_expected_prev[27] )
		&& ((HRDATA_expected_prev[27] !== last_HRDATA_exp[27]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HRDATA[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HRDATA_expected_prev);
		$display ("     Real value = %b", HRDATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_HRDATA_exp[27] = HRDATA_expected_prev[27];
	end
	if (
		( HRDATA_expected_prev[28] !== 1'bx ) && ( HRDATA_prev[28] !== HRDATA_expected_prev[28] )
		&& ((HRDATA_expected_prev[28] !== last_HRDATA_exp[28]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HRDATA[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HRDATA_expected_prev);
		$display ("     Real value = %b", HRDATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_HRDATA_exp[28] = HRDATA_expected_prev[28];
	end
	if (
		( HRDATA_expected_prev[29] !== 1'bx ) && ( HRDATA_prev[29] !== HRDATA_expected_prev[29] )
		&& ((HRDATA_expected_prev[29] !== last_HRDATA_exp[29]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HRDATA[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HRDATA_expected_prev);
		$display ("     Real value = %b", HRDATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_HRDATA_exp[29] = HRDATA_expected_prev[29];
	end
	if (
		( HRDATA_expected_prev[30] !== 1'bx ) && ( HRDATA_prev[30] !== HRDATA_expected_prev[30] )
		&& ((HRDATA_expected_prev[30] !== last_HRDATA_exp[30]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HRDATA[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HRDATA_expected_prev);
		$display ("     Real value = %b", HRDATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_HRDATA_exp[30] = HRDATA_expected_prev[30];
	end
	if (
		( HRDATA_expected_prev[31] !== 1'bx ) && ( HRDATA_prev[31] !== HRDATA_expected_prev[31] )
		&& ((HRDATA_expected_prev[31] !== last_HRDATA_exp[31]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HRDATA[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HRDATA_expected_prev);
		$display ("     Real value = %b", HRDATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_HRDATA_exp[31] = HRDATA_expected_prev[31];
	end
	if (
		( HREADYout_expected_prev !== 1'bx ) && ( HREADYout_prev !== HREADYout_expected_prev )
		&& ((HREADYout_expected_prev !== last_HREADYout_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HREADYout :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HREADYout_expected_prev);
		$display ("     Real value = %b", HREADYout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_HREADYout_exp = HREADYout_expected_prev;
	end
	if (
		( HRESP_expected_prev[0] !== 1'bx ) && ( HRESP_prev[0] !== HRESP_expected_prev[0] )
		&& ((HRESP_expected_prev[0] !== last_HRESP_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HRESP[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HRESP_expected_prev);
		$display ("     Real value = %b", HRESP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_HRESP_exp[0] = HRESP_expected_prev[0];
	end
	if (
		( HRESP_expected_prev[1] !== 1'bx ) && ( HRESP_prev[1] !== HRESP_expected_prev[1] )
		&& ((HRESP_expected_prev[1] !== last_HRESP_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HRESP[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HRESP_expected_prev);
		$display ("     Real value = %b", HRESP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_HRESP_exp[1] = HRESP_expected_prev[1];
	end
	if (
		( UART_TXD_expected_prev !== 1'bx ) && ( UART_TXD_prev !== UART_TXD_expected_prev )
		&& ((UART_TXD_expected_prev !== last_UART_TXD_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port UART_TXD :: @time = %t",  $realtime);
		$display ("     Expected value = %b", UART_TXD_expected_prev);
		$display ("     Real value = %b", UART_TXD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_UART_TXD_exp = UART_TXD_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#10000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module AHB_APB_UART_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [2:0] HBURST;
reg HCLK;
reg HREADYin;
reg HRESETn;
reg HSELABPif;
reg [2:0] HSIZES;
reg [1:0] HTRANS;
reg [31:0] HWDATA;
reg HWRITE;
reg UARTCLK;
reg UART_RXD;
reg [6:0] ctrl_i;
reg [19:0] desired_baud_rate;
reg [1:0] fifo_en;
reg [3:0] number_data_receive;
reg [3:0] number_data_trans;
reg parity_bit_mode;
reg [1:0] state_isr;
reg stop_bit_twice;
reg uart_mode_clk_sel;
// wires                                               
wire [31:0] HRDATA;
wire HREADYout;
wire [1:0] HRESP;
wire UART_TXD;

wire sampler;                             

// assign statements (if any)                          
AHB_APB_UART i1 (
// port map - connection between master ports and signals/registers   
	.HBURST(HBURST),
	.HCLK(HCLK),
	.HRDATA(HRDATA),
	.HREADYin(HREADYin),
	.HREADYout(HREADYout),
	.HRESETn(HRESETn),
	.HRESP(HRESP),
	.HSELABPif(HSELABPif),
	.HSIZES(HSIZES),
	.HTRANS(HTRANS),
	.HWDATA(HWDATA),
	.HWRITE(HWRITE),
	.UARTCLK(UARTCLK),
	.UART_RXD(UART_RXD),
	.UART_TXD(UART_TXD),
	.ctrl_i(ctrl_i),
	.desired_baud_rate(desired_baud_rate),
	.fifo_en(fifo_en),
	.number_data_receive(number_data_receive),
	.number_data_trans(number_data_trans),
	.parity_bit_mode(parity_bit_mode),
	.state_isr(state_isr),
	.stop_bit_twice(stop_bit_twice),
	.uart_mode_clk_sel(uart_mode_clk_sel)
);
// fifo_en[ 1 ]
initial
begin
	fifo_en[1] = 1'b1;
end 
// fifo_en[ 0 ]
initial
begin
	fifo_en[0] = 1'b1;
end 
// ctrl_i[ 6 ]
initial
begin
	ctrl_i[6] = 1'b0;
end 
// ctrl_i[ 5 ]
initial
begin
	ctrl_i[5] = 1'b0;
end 
// ctrl_i[ 4 ]
initial
begin
	ctrl_i[4] = 1'b0;
end 
// ctrl_i[ 3 ]
initial
begin
	ctrl_i[3] = 1'b0;
end 
// ctrl_i[ 2 ]
initial
begin
	ctrl_i[2] = 1'b0;
end 
// ctrl_i[ 1 ]
initial
begin
	ctrl_i[1] = 1'b1;
end 
// ctrl_i[ 0 ]
initial
begin
	ctrl_i[0] = 1'b1;
end 
// state_isr[ 1 ]
initial
begin
	state_isr[1] = 1'b0;
end 
// state_isr[ 0 ]
initial
begin
	state_isr[0] = 1'b0;
end 
// desired_baud_rate[ 19 ]
initial
begin
	desired_baud_rate[19] = 1'b0;
end 
// desired_baud_rate[ 18 ]
initial
begin
	desired_baud_rate[18] = 1'b0;
end 
// desired_baud_rate[ 17 ]
initial
begin
	desired_baud_rate[17] = 1'b0;
end 
// desired_baud_rate[ 16 ]
initial
begin
	desired_baud_rate[16] = 1'b1;
end 
// desired_baud_rate[ 15 ]
initial
begin
	desired_baud_rate[15] = 1'b1;
end 
// desired_baud_rate[ 14 ]
initial
begin
	desired_baud_rate[14] = 1'b1;
end 
// desired_baud_rate[ 13 ]
initial
begin
	desired_baud_rate[13] = 1'b0;
end 
// desired_baud_rate[ 12 ]
initial
begin
	desired_baud_rate[12] = 1'b0;
end 
// desired_baud_rate[ 11 ]
initial
begin
	desired_baud_rate[11] = 1'b0;
end 
// desired_baud_rate[ 10 ]
initial
begin
	desired_baud_rate[10] = 1'b0;
end 
// desired_baud_rate[ 9 ]
initial
begin
	desired_baud_rate[9] = 1'b1;
end 
// desired_baud_rate[ 8 ]
initial
begin
	desired_baud_rate[8] = 1'b0;
end 
// desired_baud_rate[ 7 ]
initial
begin
	desired_baud_rate[7] = 1'b0;
end 
// desired_baud_rate[ 6 ]
initial
begin
	desired_baud_rate[6] = 1'b0;
end 
// desired_baud_rate[ 5 ]
initial
begin
	desired_baud_rate[5] = 1'b0;
end 
// desired_baud_rate[ 4 ]
initial
begin
	desired_baud_rate[4] = 1'b0;
end 
// desired_baud_rate[ 3 ]
initial
begin
	desired_baud_rate[3] = 1'b0;
end 
// desired_baud_rate[ 2 ]
initial
begin
	desired_baud_rate[2] = 1'b0;
end 
// desired_baud_rate[ 1 ]
initial
begin
	desired_baud_rate[1] = 1'b0;
end 
// desired_baud_rate[ 0 ]
initial
begin
	desired_baud_rate[0] = 1'b0;
end 
// number_data_receive[ 3 ]
initial
begin
	number_data_receive[3] = 1'b1;
end 
// number_data_receive[ 2 ]
initial
begin
	number_data_receive[2] = 1'b0;
end 
// number_data_receive[ 1 ]
initial
begin
	number_data_receive[1] = 1'b0;
end 
// number_data_receive[ 0 ]
initial
begin
	number_data_receive[0] = 1'b0;
end 
// number_data_trans[ 3 ]
initial
begin
	number_data_trans[3] = 1'b1;
end 
// number_data_trans[ 2 ]
initial
begin
	number_data_trans[2] = 1'b0;
end 
// number_data_trans[ 1 ]
initial
begin
	number_data_trans[1] = 1'b0;
end 
// number_data_trans[ 0 ]
initial
begin
	number_data_trans[0] = 1'b0;
end 

// parity_bit_mode
initial
begin
	parity_bit_mode = 1'b1;
end 

// stop_bit_twice
initial
begin
	stop_bit_twice = 1'b1;
end 
// HTRANS[ 1 ]
initial
begin
	HTRANS[1] = 1'b1;
end 
// HTRANS[ 0 ]
initial
begin
	HTRANS[0] = 1'b1;
end 
// HSIZES[ 2 ]
initial
begin
	HSIZES[2] = 1'b0;
end 
// HSIZES[ 1 ]
initial
begin
	HSIZES[1] = 1'b0;
end 
// HSIZES[ 0 ]
initial
begin
	HSIZES[0] = 1'b1;
end 
// HBURST[ 2 ]
initial
begin
	HBURST[2] = 1'b0;
end 
// HBURST[ 1 ]
initial
begin
	HBURST[1] = 1'b0;
end 
// HBURST[ 0 ]
initial
begin
	HBURST[0] = 1'b1;
end 

// UARTCLK
initial
begin
	repeat(333)
	begin
		UARTCLK = 1'b0;
		UARTCLK = #15000 1'b1;
		# 15000;
	end
	UARTCLK = 1'b0;
end 

// HCLK
always
begin
	HCLK = 1'b0;
	HCLK = #5000 1'b1;
	#5000;
end 

// uart_mode_clk_sel
initial
begin
	uart_mode_clk_sel = 1'b1;
end 

// HRESETn
initial
begin
	HRESETn = 1'b0;
	HRESETn = #40000 1'b1;
end 

// HWRITE
initial
begin
	HWRITE = 1'b0;
	HWRITE = #4560000 1'b1;
	HWRITE = #5160000 1'b0;
end 

// HREADYin
initial
begin
	HREADYin = 1'b1;
end 

// HSELABPif
initial
begin
	HSELABPif = 1'b1;
end 
// HWDATA[ 31 ]
initial
begin
	HWDATA[31] = 1'b0;
end 
// HWDATA[ 30 ]
initial
begin
	HWDATA[30] = 1'b0;
end 
// HWDATA[ 29 ]
initial
begin
	HWDATA[29] = 1'b0;
end 
// HWDATA[ 28 ]
initial
begin
	HWDATA[28] = 1'b0;
end 
// HWDATA[ 27 ]
initial
begin
	HWDATA[27] = 1'b0;
end 
// HWDATA[ 26 ]
initial
begin
	HWDATA[26] = 1'b0;
end 
// HWDATA[ 25 ]
initial
begin
	HWDATA[25] = 1'b0;
end 
// HWDATA[ 24 ]
initial
begin
	HWDATA[24] = 1'b1;
end 
// HWDATA[ 23 ]
initial
begin
	HWDATA[23] = 1'b0;
end 
// HWDATA[ 22 ]
initial
begin
	HWDATA[22] = 1'b0;
end 
// HWDATA[ 21 ]
initial
begin
	HWDATA[21] = 1'b1;
end 
// HWDATA[ 20 ]
initial
begin
	HWDATA[20] = 1'b0;
end 
// HWDATA[ 19 ]
initial
begin
	HWDATA[19] = 1'b0;
end 
// HWDATA[ 18 ]
initial
begin
	HWDATA[18] = 1'b0;
end 
// HWDATA[ 17 ]
initial
begin
	HWDATA[17] = 1'b1;
end 
// HWDATA[ 16 ]
initial
begin
	HWDATA[16] = 1'b1;
end 
// HWDATA[ 15 ]
initial
begin
	HWDATA[15] = 1'b0;
end 
// HWDATA[ 14 ]
initial
begin
	HWDATA[14] = 1'b1;
end 
// HWDATA[ 13 ]
initial
begin
	HWDATA[13] = 1'b0;
end 
// HWDATA[ 12 ]
initial
begin
	HWDATA[12] = 1'b0;
end 
// HWDATA[ 11 ]
initial
begin
	HWDATA[11] = 1'b0;
end 
// HWDATA[ 10 ]
initial
begin
	HWDATA[10] = 1'b1;
end 
// HWDATA[ 9 ]
initial
begin
	HWDATA[9] = 1'b0;
end 
// HWDATA[ 8 ]
initial
begin
	HWDATA[8] = 1'b1;
end 
// HWDATA[ 7 ]
initial
begin
	HWDATA[7] = 1'b0;
end 
// HWDATA[ 6 ]
initial
begin
	HWDATA[6] = 1'b1;
end 
// HWDATA[ 5 ]
initial
begin
	HWDATA[5] = 1'b1;
end 
// HWDATA[ 4 ]
initial
begin
	HWDATA[4] = 1'b0;
end 
// HWDATA[ 3 ]
initial
begin
	HWDATA[3] = 1'b0;
end 
// HWDATA[ 2 ]
initial
begin
	HWDATA[2] = 1'b1;
end 
// HWDATA[ 1 ]
initial
begin
	HWDATA[1] = 1'b1;
end 
// HWDATA[ 0 ]
initial
begin
	HWDATA[0] = 1'b1;
end 

// UART_RXD
initial
begin
	UART_RXD = 1'b1;
	UART_RXD = #330000 1'b0;
	UART_RXD = #20000 1'b1;
	UART_RXD = #10000 1'b0;
	UART_RXD = #10000 1'b1;
	UART_RXD = #10000 1'b0;
	UART_RXD = #10000 1'b1;
	UART_RXD = #150000 1'b0;
	UART_RXD = #40000 1'b1;
	UART_RXD = #180000 1'b0;
	UART_RXD = #50000 1'b1;
	UART_RXD = #180000 1'b0;
	UART_RXD = #10000 1'b1;
	UART_RXD = #10000 1'b0;
	UART_RXD = #20000 1'b1;
end 

AHB_APB_UART_vlg_sample_tst tb_sample (
	.HBURST(HBURST),
	.HCLK(HCLK),
	.HREADYin(HREADYin),
	.HRESETn(HRESETn),
	.HSELABPif(HSELABPif),
	.HSIZES(HSIZES),
	.HTRANS(HTRANS),
	.HWDATA(HWDATA),
	.HWRITE(HWRITE),
	.UARTCLK(UARTCLK),
	.UART_RXD(UART_RXD),
	.ctrl_i(ctrl_i),
	.desired_baud_rate(desired_baud_rate),
	.fifo_en(fifo_en),
	.number_data_receive(number_data_receive),
	.number_data_trans(number_data_trans),
	.parity_bit_mode(parity_bit_mode),
	.state_isr(state_isr),
	.stop_bit_twice(stop_bit_twice),
	.uart_mode_clk_sel(uart_mode_clk_sel),
	.sampler_tx(sampler)
);

AHB_APB_UART_vlg_check_tst tb_out(
	.HRDATA(HRDATA),
	.HREADYout(HREADYout),
	.HRESP(HRESP),
	.UART_TXD(UART_TXD),
	.sampler_rx(sampler)
);
endmodule

