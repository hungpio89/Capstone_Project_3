// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/08/2024 15:32:45"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Thesis_Project
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Thesis_Project_vlg_sample_tst(
	UARTCLK,
	UART_RXD,
	clk_i,
	data_input,
	rst_ni,
	sampler_tx
);
input  UARTCLK;
input  UART_RXD;
input  clk_i;
input [9:0] data_input;
input  rst_ni;
output sampler_tx;

reg sample;
time current_time;
always @(UARTCLK or UART_RXD or clk_i or data_input or rst_ni)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Thesis_Project_vlg_check_tst (
	HADDR,
	HRDATA,
	UART_TXD,
	baud_tick,
	data_io_lcd_o,
	data_io_ledr_o,
	data_out,
	data_trans,
	pc_debug_o,
	sampler_rx
);
input [31:0] HADDR;
input [31:0] HRDATA;
input  UART_TXD;
input  baud_tick;
input [31:0] data_io_lcd_o;
input [31:0] data_io_ledr_o;
input [31:0] data_out;
input [11:0] data_trans;
input [31:0] pc_debug_o;
input sampler_rx;

reg [31:0] HADDR_expected;
reg [31:0] HRDATA_expected;
reg  UART_TXD_expected;
reg  baud_tick_expected;
reg [31:0] data_io_lcd_o_expected;
reg [31:0] data_io_ledr_o_expected;
reg [31:0] data_out_expected;
reg [11:0] data_trans_expected;
reg [31:0] pc_debug_o_expected;

reg [31:0] HADDR_prev;
reg [31:0] HRDATA_prev;
reg  UART_TXD_prev;
reg  baud_tick_prev;
reg [31:0] data_io_lcd_o_prev;
reg [31:0] data_io_ledr_o_prev;
reg [31:0] data_out_prev;
reg [11:0] data_trans_prev;
reg [31:0] pc_debug_o_prev;

reg [31:0] HADDR_expected_prev;
reg [31:0] HRDATA_expected_prev;
reg  UART_TXD_expected_prev;
reg  baud_tick_expected_prev;
reg [31:0] data_io_lcd_o_expected_prev;
reg [31:0] data_io_ledr_o_expected_prev;
reg [31:0] data_out_expected_prev;
reg [11:0] data_trans_expected_prev;
reg [31:0] pc_debug_o_expected_prev;

reg [31:0] last_HADDR_exp;
reg [31:0] last_HRDATA_exp;
reg  last_UART_TXD_exp;
reg  last_baud_tick_exp;
reg [31:0] last_data_io_lcd_o_exp;
reg [31:0] last_data_io_ledr_o_exp;
reg [31:0] last_data_out_exp;
reg [11:0] last_data_trans_exp;
reg [31:0] last_pc_debug_o_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:9] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 9'b1;
end

// update real /o prevs

always @(trigger)
begin
	HADDR_prev = HADDR;
	HRDATA_prev = HRDATA;
	UART_TXD_prev = UART_TXD;
	baud_tick_prev = baud_tick;
	data_io_lcd_o_prev = data_io_lcd_o;
	data_io_ledr_o_prev = data_io_ledr_o;
	data_out_prev = data_out;
	data_trans_prev = data_trans;
	pc_debug_o_prev = pc_debug_o;
end

// update expected /o prevs

always @(trigger)
begin
	HADDR_expected_prev = HADDR_expected;
	HRDATA_expected_prev = HRDATA_expected;
	UART_TXD_expected_prev = UART_TXD_expected;
	baud_tick_expected_prev = baud_tick_expected;
	data_io_lcd_o_expected_prev = data_io_lcd_o_expected;
	data_io_ledr_o_expected_prev = data_io_ledr_o_expected;
	data_out_expected_prev = data_out_expected;
	data_trans_expected_prev = data_trans_expected;
	pc_debug_o_expected_prev = pc_debug_o_expected;
end



// expected baud_tick
initial
begin
	baud_tick_expected = 1'bX;
end 
// expected HRDATA[ 31 ]
initial
begin
	HRDATA_expected[31] = 1'bX;
end 
// expected HRDATA[ 30 ]
initial
begin
	HRDATA_expected[30] = 1'bX;
end 
// expected HRDATA[ 29 ]
initial
begin
	HRDATA_expected[29] = 1'bX;
end 
// expected HRDATA[ 28 ]
initial
begin
	HRDATA_expected[28] = 1'bX;
end 
// expected HRDATA[ 27 ]
initial
begin
	HRDATA_expected[27] = 1'bX;
end 
// expected HRDATA[ 26 ]
initial
begin
	HRDATA_expected[26] = 1'bX;
end 
// expected HRDATA[ 25 ]
initial
begin
	HRDATA_expected[25] = 1'bX;
end 
// expected HRDATA[ 24 ]
initial
begin
	HRDATA_expected[24] = 1'bX;
end 
// expected HRDATA[ 23 ]
initial
begin
	HRDATA_expected[23] = 1'bX;
end 
// expected HRDATA[ 22 ]
initial
begin
	HRDATA_expected[22] = 1'bX;
end 
// expected HRDATA[ 21 ]
initial
begin
	HRDATA_expected[21] = 1'bX;
end 
// expected HRDATA[ 20 ]
initial
begin
	HRDATA_expected[20] = 1'bX;
end 
// expected HRDATA[ 19 ]
initial
begin
	HRDATA_expected[19] = 1'bX;
end 
// expected HRDATA[ 18 ]
initial
begin
	HRDATA_expected[18] = 1'bX;
end 
// expected HRDATA[ 17 ]
initial
begin
	HRDATA_expected[17] = 1'bX;
end 
// expected HRDATA[ 16 ]
initial
begin
	HRDATA_expected[16] = 1'bX;
end 
// expected HRDATA[ 15 ]
initial
begin
	HRDATA_expected[15] = 1'bX;
end 
// expected HRDATA[ 14 ]
initial
begin
	HRDATA_expected[14] = 1'bX;
end 
// expected HRDATA[ 13 ]
initial
begin
	HRDATA_expected[13] = 1'bX;
end 
// expected HRDATA[ 12 ]
initial
begin
	HRDATA_expected[12] = 1'bX;
end 
// expected HRDATA[ 11 ]
initial
begin
	HRDATA_expected[11] = 1'bX;
end 
// expected HRDATA[ 10 ]
initial
begin
	HRDATA_expected[10] = 1'bX;
end 
// expected HRDATA[ 9 ]
initial
begin
	HRDATA_expected[9] = 1'bX;
end 
// expected HRDATA[ 8 ]
initial
begin
	HRDATA_expected[8] = 1'bX;
end 
// expected HRDATA[ 7 ]
initial
begin
	HRDATA_expected[7] = 1'bX;
end 
// expected HRDATA[ 6 ]
initial
begin
	HRDATA_expected[6] = 1'bX;
end 
// expected HRDATA[ 5 ]
initial
begin
	HRDATA_expected[5] = 1'bX;
end 
// expected HRDATA[ 4 ]
initial
begin
	HRDATA_expected[4] = 1'bX;
end 
// expected HRDATA[ 3 ]
initial
begin
	HRDATA_expected[3] = 1'bX;
end 
// expected HRDATA[ 2 ]
initial
begin
	HRDATA_expected[2] = 1'bX;
end 
// expected HRDATA[ 1 ]
initial
begin
	HRDATA_expected[1] = 1'bX;
end 
// expected HRDATA[ 0 ]
initial
begin
	HRDATA_expected[0] = 1'bX;
end 

// expected UART_TXD
initial
begin
	UART_TXD_expected = 1'bX;
end 
// expected data_io_lcd_o[ 31 ]
initial
begin
	data_io_lcd_o_expected[31] = 1'bX;
	data_io_lcd_o_expected[31] = #999000 1'b0;
end 
// expected data_io_lcd_o[ 30 ]
initial
begin
	data_io_lcd_o_expected[30] = 1'bX;
	data_io_lcd_o_expected[30] = #999000 1'b0;
end 
// expected data_io_lcd_o[ 29 ]
initial
begin
	data_io_lcd_o_expected[29] = 1'bX;
	data_io_lcd_o_expected[29] = #999000 1'b0;
end 
// expected data_io_lcd_o[ 28 ]
initial
begin
	data_io_lcd_o_expected[28] = 1'bX;
	data_io_lcd_o_expected[28] = #999000 1'b0;
end 
// expected data_io_lcd_o[ 27 ]
initial
begin
	data_io_lcd_o_expected[27] = 1'bX;
	data_io_lcd_o_expected[27] = #999000 1'b0;
end 
// expected data_io_lcd_o[ 26 ]
initial
begin
	data_io_lcd_o_expected[26] = 1'bX;
	data_io_lcd_o_expected[26] = #999000 1'b0;
end 
// expected data_io_lcd_o[ 25 ]
initial
begin
	data_io_lcd_o_expected[25] = 1'bX;
	data_io_lcd_o_expected[25] = #999000 1'b0;
end 
// expected data_io_lcd_o[ 24 ]
initial
begin
	data_io_lcd_o_expected[24] = 1'bX;
	data_io_lcd_o_expected[24] = #999000 1'b0;
end 
// expected data_io_lcd_o[ 23 ]
initial
begin
	data_io_lcd_o_expected[23] = 1'bX;
	data_io_lcd_o_expected[23] = #999000 1'b0;
end 
// expected data_io_lcd_o[ 22 ]
initial
begin
	data_io_lcd_o_expected[22] = 1'bX;
	data_io_lcd_o_expected[22] = #999000 1'b0;
end 
// expected data_io_lcd_o[ 21 ]
initial
begin
	data_io_lcd_o_expected[21] = 1'bX;
	data_io_lcd_o_expected[21] = #999000 1'b0;
end 
// expected data_io_lcd_o[ 20 ]
initial
begin
	data_io_lcd_o_expected[20] = 1'bX;
	data_io_lcd_o_expected[20] = #999000 1'b0;
end 
// expected data_io_lcd_o[ 19 ]
initial
begin
	data_io_lcd_o_expected[19] = 1'bX;
	data_io_lcd_o_expected[19] = #999000 1'b0;
end 
// expected data_io_lcd_o[ 18 ]
initial
begin
	data_io_lcd_o_expected[18] = 1'bX;
	data_io_lcd_o_expected[18] = #999000 1'b0;
end 
// expected data_io_lcd_o[ 17 ]
initial
begin
	data_io_lcd_o_expected[17] = 1'bX;
	data_io_lcd_o_expected[17] = #999000 1'b0;
end 
// expected data_io_lcd_o[ 16 ]
initial
begin
	data_io_lcd_o_expected[16] = 1'bX;
	data_io_lcd_o_expected[16] = #999000 1'b0;
end 
// expected data_io_lcd_o[ 15 ]
initial
begin
	data_io_lcd_o_expected[15] = 1'bX;
	data_io_lcd_o_expected[15] = #999000 1'b0;
end 
// expected data_io_lcd_o[ 14 ]
initial
begin
	data_io_lcd_o_expected[14] = 1'bX;
	data_io_lcd_o_expected[14] = #999000 1'b0;
end 
// expected data_io_lcd_o[ 13 ]
initial
begin
	data_io_lcd_o_expected[13] = 1'bX;
	data_io_lcd_o_expected[13] = #999000 1'b0;
end 
// expected data_io_lcd_o[ 12 ]
initial
begin
	data_io_lcd_o_expected[12] = 1'bX;
	data_io_lcd_o_expected[12] = #999000 1'b0;
end 
// expected data_io_lcd_o[ 11 ]
initial
begin
	data_io_lcd_o_expected[11] = 1'bX;
	data_io_lcd_o_expected[11] = #999000 1'b0;
end 
// expected data_io_lcd_o[ 10 ]
initial
begin
	data_io_lcd_o_expected[10] = 1'bX;
	data_io_lcd_o_expected[10] = #999000 1'b0;
end 
// expected data_io_lcd_o[ 9 ]
initial
begin
	data_io_lcd_o_expected[9] = 1'bX;
	data_io_lcd_o_expected[9] = #999000 1'b0;
end 
// expected data_io_lcd_o[ 8 ]
initial
begin
	data_io_lcd_o_expected[8] = 1'bX;
	data_io_lcd_o_expected[8] = #999000 1'b0;
end 
// expected data_io_lcd_o[ 7 ]
initial
begin
	data_io_lcd_o_expected[7] = 1'bX;
	data_io_lcd_o_expected[7] = #999000 1'b0;
end 
// expected data_io_lcd_o[ 6 ]
initial
begin
	data_io_lcd_o_expected[6] = 1'bX;
	data_io_lcd_o_expected[6] = #999000 1'b0;
end 
// expected data_io_lcd_o[ 5 ]
initial
begin
	data_io_lcd_o_expected[5] = 1'bX;
	data_io_lcd_o_expected[5] = #999000 1'b0;
end 
// expected data_io_lcd_o[ 4 ]
initial
begin
	data_io_lcd_o_expected[4] = 1'bX;
	data_io_lcd_o_expected[4] = #999000 1'b0;
end 
// expected data_io_lcd_o[ 3 ]
initial
begin
	data_io_lcd_o_expected[3] = 1'bX;
	data_io_lcd_o_expected[3] = #999000 1'b0;
end 
// expected data_io_lcd_o[ 2 ]
initial
begin
	data_io_lcd_o_expected[2] = 1'bX;
	data_io_lcd_o_expected[2] = #999000 1'b0;
end 
// expected data_io_lcd_o[ 1 ]
initial
begin
	data_io_lcd_o_expected[1] = 1'bX;
	data_io_lcd_o_expected[1] = #999000 1'b0;
end 
// expected data_io_lcd_o[ 0 ]
initial
begin
	data_io_lcd_o_expected[0] = 1'bX;
	data_io_lcd_o_expected[0] = #999000 1'b0;
end 
// expected data_io_ledr_o[ 31 ]
initial
begin
	data_io_ledr_o_expected[31] = 1'bX;
	data_io_ledr_o_expected[31] = #999000 1'b0;
end 
// expected data_io_ledr_o[ 30 ]
initial
begin
	data_io_ledr_o_expected[30] = 1'bX;
	data_io_ledr_o_expected[30] = #999000 1'b0;
end 
// expected data_io_ledr_o[ 29 ]
initial
begin
	data_io_ledr_o_expected[29] = 1'bX;
	data_io_ledr_o_expected[29] = #999000 1'b0;
end 
// expected data_io_ledr_o[ 28 ]
initial
begin
	data_io_ledr_o_expected[28] = 1'bX;
	data_io_ledr_o_expected[28] = #999000 1'b0;
end 
// expected data_io_ledr_o[ 27 ]
initial
begin
	data_io_ledr_o_expected[27] = 1'bX;
	data_io_ledr_o_expected[27] = #999000 1'b0;
end 
// expected data_io_ledr_o[ 26 ]
initial
begin
	data_io_ledr_o_expected[26] = 1'bX;
	data_io_ledr_o_expected[26] = #999000 1'b0;
end 
// expected data_io_ledr_o[ 25 ]
initial
begin
	data_io_ledr_o_expected[25] = 1'bX;
	data_io_ledr_o_expected[25] = #999000 1'b0;
end 
// expected data_io_ledr_o[ 24 ]
initial
begin
	data_io_ledr_o_expected[24] = 1'bX;
	data_io_ledr_o_expected[24] = #999000 1'b0;
end 
// expected data_io_ledr_o[ 23 ]
initial
begin
	data_io_ledr_o_expected[23] = 1'bX;
	data_io_ledr_o_expected[23] = #999000 1'b0;
end 
// expected data_io_ledr_o[ 22 ]
initial
begin
	data_io_ledr_o_expected[22] = 1'bX;
	data_io_ledr_o_expected[22] = #999000 1'b0;
end 
// expected data_io_ledr_o[ 21 ]
initial
begin
	data_io_ledr_o_expected[21] = 1'bX;
	data_io_ledr_o_expected[21] = #999000 1'b0;
end 
// expected data_io_ledr_o[ 20 ]
initial
begin
	data_io_ledr_o_expected[20] = 1'bX;
	data_io_ledr_o_expected[20] = #999000 1'b0;
end 
// expected data_io_ledr_o[ 19 ]
initial
begin
	data_io_ledr_o_expected[19] = 1'bX;
	data_io_ledr_o_expected[19] = #999000 1'b0;
end 
// expected data_io_ledr_o[ 18 ]
initial
begin
	data_io_ledr_o_expected[18] = 1'bX;
	data_io_ledr_o_expected[18] = #999000 1'b0;
end 
// expected data_io_ledr_o[ 17 ]
initial
begin
	data_io_ledr_o_expected[17] = 1'bX;
	data_io_ledr_o_expected[17] = #999000 1'b0;
end 
// expected data_io_ledr_o[ 16 ]
initial
begin
	data_io_ledr_o_expected[16] = 1'bX;
	data_io_ledr_o_expected[16] = #999000 1'b0;
end 
// expected data_io_ledr_o[ 15 ]
initial
begin
	data_io_ledr_o_expected[15] = 1'bX;
	data_io_ledr_o_expected[15] = #999000 1'b0;
end 
// expected data_io_ledr_o[ 14 ]
initial
begin
	data_io_ledr_o_expected[14] = 1'bX;
	data_io_ledr_o_expected[14] = #999000 1'b0;
end 
// expected data_io_ledr_o[ 13 ]
initial
begin
	data_io_ledr_o_expected[13] = 1'bX;
	data_io_ledr_o_expected[13] = #999000 1'b0;
end 
// expected data_io_ledr_o[ 12 ]
initial
begin
	data_io_ledr_o_expected[12] = 1'bX;
	data_io_ledr_o_expected[12] = #999000 1'b0;
end 
// expected data_io_ledr_o[ 11 ]
initial
begin
	data_io_ledr_o_expected[11] = 1'bX;
	data_io_ledr_o_expected[11] = #999000 1'b0;
end 
// expected data_io_ledr_o[ 10 ]
initial
begin
	data_io_ledr_o_expected[10] = 1'bX;
	data_io_ledr_o_expected[10] = #999000 1'b0;
end 
// expected data_io_ledr_o[ 9 ]
initial
begin
	data_io_ledr_o_expected[9] = 1'bX;
	data_io_ledr_o_expected[9] = #999000 1'b0;
end 
// expected data_io_ledr_o[ 8 ]
initial
begin
	data_io_ledr_o_expected[8] = 1'bX;
	data_io_ledr_o_expected[8] = #999000 1'b0;
end 
// expected data_io_ledr_o[ 7 ]
initial
begin
	data_io_ledr_o_expected[7] = 1'bX;
	data_io_ledr_o_expected[7] = #999000 1'b0;
end 
// expected data_io_ledr_o[ 6 ]
initial
begin
	data_io_ledr_o_expected[6] = 1'bX;
	data_io_ledr_o_expected[6] = #999000 1'b0;
end 
// expected data_io_ledr_o[ 5 ]
initial
begin
	data_io_ledr_o_expected[5] = 1'bX;
	data_io_ledr_o_expected[5] = #999000 1'b0;
end 
// expected data_io_ledr_o[ 4 ]
initial
begin
	data_io_ledr_o_expected[4] = 1'bX;
	data_io_ledr_o_expected[4] = #999000 1'b0;
end 
// expected data_io_ledr_o[ 3 ]
initial
begin
	data_io_ledr_o_expected[3] = 1'bX;
	data_io_ledr_o_expected[3] = #999000 1'b0;
end 
// expected data_io_ledr_o[ 2 ]
initial
begin
	data_io_ledr_o_expected[2] = 1'bX;
	data_io_ledr_o_expected[2] = #999000 1'b0;
end 
// expected data_io_ledr_o[ 1 ]
initial
begin
	data_io_ledr_o_expected[1] = 1'bX;
	data_io_ledr_o_expected[1] = #999000 1'b0;
end 
// expected data_io_ledr_o[ 0 ]
initial
begin
	data_io_ledr_o_expected[0] = 1'bX;
	data_io_ledr_o_expected[0] = #999000 1'b0;
end 
// expected data_out[ 31 ]
initial
begin
	data_out_expected[31] = 1'bX;
	data_out_expected[31] = #999000 1'b0;
end 
// expected data_out[ 30 ]
initial
begin
	data_out_expected[30] = 1'bX;
	data_out_expected[30] = #999000 1'b0;
end 
// expected data_out[ 29 ]
initial
begin
	data_out_expected[29] = 1'bX;
	data_out_expected[29] = #999000 1'b0;
end 
// expected data_out[ 28 ]
initial
begin
	data_out_expected[28] = 1'bX;
	data_out_expected[28] = #999000 1'b0;
end 
// expected data_out[ 27 ]
initial
begin
	data_out_expected[27] = 1'bX;
	data_out_expected[27] = #999000 1'b0;
end 
// expected data_out[ 26 ]
initial
begin
	data_out_expected[26] = 1'bX;
	data_out_expected[26] = #999000 1'b0;
end 
// expected data_out[ 25 ]
initial
begin
	data_out_expected[25] = 1'bX;
	data_out_expected[25] = #999000 1'b0;
end 
// expected data_out[ 24 ]
initial
begin
	data_out_expected[24] = 1'bX;
	data_out_expected[24] = #999000 1'b0;
end 
// expected data_out[ 23 ]
initial
begin
	data_out_expected[23] = 1'bX;
	data_out_expected[23] = #999000 1'b0;
end 
// expected data_out[ 22 ]
initial
begin
	data_out_expected[22] = 1'bX;
	data_out_expected[22] = #999000 1'b0;
end 
// expected data_out[ 21 ]
initial
begin
	data_out_expected[21] = 1'bX;
	data_out_expected[21] = #999000 1'b0;
end 
// expected data_out[ 20 ]
initial
begin
	data_out_expected[20] = 1'bX;
	data_out_expected[20] = #999000 1'b0;
end 
// expected data_out[ 19 ]
initial
begin
	data_out_expected[19] = 1'bX;
	data_out_expected[19] = #999000 1'b0;
end 
// expected data_out[ 18 ]
initial
begin
	data_out_expected[18] = 1'bX;
	data_out_expected[18] = #999000 1'b0;
end 
// expected data_out[ 17 ]
initial
begin
	data_out_expected[17] = 1'bX;
	data_out_expected[17] = #999000 1'b0;
end 
// expected data_out[ 16 ]
initial
begin
	data_out_expected[16] = 1'bX;
	data_out_expected[16] = #999000 1'b0;
end 
// expected data_out[ 15 ]
initial
begin
	data_out_expected[15] = 1'bX;
	data_out_expected[15] = #999000 1'b0;
end 
// expected data_out[ 14 ]
initial
begin
	data_out_expected[14] = 1'bX;
	data_out_expected[14] = #999000 1'b0;
end 
// expected data_out[ 13 ]
initial
begin
	data_out_expected[13] = 1'bX;
	data_out_expected[13] = #999000 1'b0;
end 
// expected data_out[ 12 ]
initial
begin
	data_out_expected[12] = 1'bX;
	data_out_expected[12] = #999000 1'b0;
end 
// expected data_out[ 11 ]
initial
begin
	data_out_expected[11] = 1'bX;
	data_out_expected[11] = #999000 1'b0;
end 
// expected data_out[ 10 ]
initial
begin
	data_out_expected[10] = 1'bX;
	data_out_expected[10] = #999000 1'b0;
end 
// expected data_out[ 9 ]
initial
begin
	data_out_expected[9] = 1'bX;
	data_out_expected[9] = #999000 1'b0;
end 
// expected data_out[ 8 ]
initial
begin
	data_out_expected[8] = 1'bX;
	data_out_expected[8] = #999000 1'b0;
end 
// expected data_out[ 7 ]
initial
begin
	data_out_expected[7] = 1'bX;
	data_out_expected[7] = #999000 1'b0;
end 
// expected data_out[ 6 ]
initial
begin
	data_out_expected[6] = 1'bX;
	data_out_expected[6] = #999000 1'b0;
end 
// expected data_out[ 5 ]
initial
begin
	data_out_expected[5] = 1'bX;
	data_out_expected[5] = #999000 1'b0;
end 
// expected data_out[ 4 ]
initial
begin
	data_out_expected[4] = 1'bX;
	data_out_expected[4] = #999000 1'b0;
end 
// expected data_out[ 3 ]
initial
begin
	data_out_expected[3] = 1'bX;
	data_out_expected[3] = #999000 1'b0;
end 
// expected data_out[ 2 ]
initial
begin
	data_out_expected[2] = 1'bX;
	data_out_expected[2] = #999000 1'b0;
end 
// expected data_out[ 1 ]
initial
begin
	data_out_expected[1] = 1'bX;
	data_out_expected[1] = #999000 1'b0;
end 
// expected data_out[ 0 ]
initial
begin
	data_out_expected[0] = 1'bX;
	data_out_expected[0] = #999000 1'b0;
end 
// expected data_trans[ 11 ]
initial
begin
	data_trans_expected[11] = 1'bX;
	data_trans_expected[11] = #999000 1'b0;
end 
// expected data_trans[ 10 ]
initial
begin
	data_trans_expected[10] = 1'bX;
	data_trans_expected[10] = #999000 1'b0;
end 
// expected data_trans[ 9 ]
initial
begin
	data_trans_expected[9] = 1'bX;
	data_trans_expected[9] = #999000 1'b0;
end 
// expected data_trans[ 8 ]
initial
begin
	data_trans_expected[8] = 1'bX;
	data_trans_expected[8] = #999000 1'b0;
end 
// expected data_trans[ 7 ]
initial
begin
	data_trans_expected[7] = 1'bX;
	data_trans_expected[7] = #999000 1'b0;
end 
// expected data_trans[ 6 ]
initial
begin
	data_trans_expected[6] = 1'bX;
	data_trans_expected[6] = #999000 1'b0;
end 
// expected data_trans[ 5 ]
initial
begin
	data_trans_expected[5] = 1'bX;
	data_trans_expected[5] = #999000 1'b0;
end 
// expected data_trans[ 4 ]
initial
begin
	data_trans_expected[4] = 1'bX;
	data_trans_expected[4] = #999000 1'b0;
end 
// expected data_trans[ 3 ]
initial
begin
	data_trans_expected[3] = 1'bX;
	data_trans_expected[3] = #999000 1'b0;
end 
// expected data_trans[ 2 ]
initial
begin
	data_trans_expected[2] = 1'bX;
	data_trans_expected[2] = #999000 1'b0;
end 
// expected data_trans[ 1 ]
initial
begin
	data_trans_expected[1] = 1'bX;
	data_trans_expected[1] = #999000 1'b0;
end 
// expected data_trans[ 0 ]
initial
begin
	data_trans_expected[0] = 1'bX;
	data_trans_expected[0] = #999000 1'b0;
end 
// expected pc_debug_o[ 31 ]
initial
begin
	pc_debug_o_expected[31] = 1'bX;
	pc_debug_o_expected[31] = #999000 1'b0;
end 
// expected pc_debug_o[ 30 ]
initial
begin
	pc_debug_o_expected[30] = 1'bX;
	pc_debug_o_expected[30] = #999000 1'b0;
end 
// expected pc_debug_o[ 29 ]
initial
begin
	pc_debug_o_expected[29] = 1'bX;
	pc_debug_o_expected[29] = #999000 1'b0;
end 
// expected pc_debug_o[ 28 ]
initial
begin
	pc_debug_o_expected[28] = 1'bX;
	pc_debug_o_expected[28] = #999000 1'b0;
end 
// expected pc_debug_o[ 27 ]
initial
begin
	pc_debug_o_expected[27] = 1'bX;
	pc_debug_o_expected[27] = #999000 1'b0;
end 
// expected pc_debug_o[ 26 ]
initial
begin
	pc_debug_o_expected[26] = 1'bX;
	pc_debug_o_expected[26] = #999000 1'b0;
end 
// expected pc_debug_o[ 25 ]
initial
begin
	pc_debug_o_expected[25] = 1'bX;
	pc_debug_o_expected[25] = #999000 1'b0;
end 
// expected pc_debug_o[ 24 ]
initial
begin
	pc_debug_o_expected[24] = 1'bX;
	pc_debug_o_expected[24] = #999000 1'b0;
end 
// expected pc_debug_o[ 23 ]
initial
begin
	pc_debug_o_expected[23] = 1'bX;
	pc_debug_o_expected[23] = #999000 1'b0;
end 
// expected pc_debug_o[ 22 ]
initial
begin
	pc_debug_o_expected[22] = 1'bX;
	pc_debug_o_expected[22] = #999000 1'b0;
end 
// expected pc_debug_o[ 21 ]
initial
begin
	pc_debug_o_expected[21] = 1'bX;
	pc_debug_o_expected[21] = #999000 1'b0;
end 
// expected pc_debug_o[ 20 ]
initial
begin
	pc_debug_o_expected[20] = 1'bX;
	pc_debug_o_expected[20] = #999000 1'b0;
end 
// expected pc_debug_o[ 19 ]
initial
begin
	pc_debug_o_expected[19] = 1'bX;
	pc_debug_o_expected[19] = #999000 1'b0;
end 
// expected pc_debug_o[ 18 ]
initial
begin
	pc_debug_o_expected[18] = 1'bX;
	pc_debug_o_expected[18] = #999000 1'b0;
end 
// expected pc_debug_o[ 17 ]
initial
begin
	pc_debug_o_expected[17] = 1'bX;
	pc_debug_o_expected[17] = #999000 1'b0;
end 
// expected pc_debug_o[ 16 ]
initial
begin
	pc_debug_o_expected[16] = 1'bX;
	pc_debug_o_expected[16] = #999000 1'b0;
end 
// expected pc_debug_o[ 15 ]
initial
begin
	pc_debug_o_expected[15] = 1'bX;
	pc_debug_o_expected[15] = #999000 1'b0;
end 
// expected pc_debug_o[ 14 ]
initial
begin
	pc_debug_o_expected[14] = 1'bX;
	pc_debug_o_expected[14] = #999000 1'b0;
end 
// expected pc_debug_o[ 13 ]
initial
begin
	pc_debug_o_expected[13] = 1'bX;
	pc_debug_o_expected[13] = #999000 1'b0;
end 
// expected pc_debug_o[ 12 ]
initial
begin
	pc_debug_o_expected[12] = 1'bX;
	pc_debug_o_expected[12] = #999000 1'b0;
end 
// expected pc_debug_o[ 11 ]
initial
begin
	pc_debug_o_expected[11] = 1'bX;
	pc_debug_o_expected[11] = #999000 1'b0;
end 
// expected pc_debug_o[ 10 ]
initial
begin
	pc_debug_o_expected[10] = 1'bX;
	pc_debug_o_expected[10] = #999000 1'b0;
end 
// expected pc_debug_o[ 9 ]
initial
begin
	pc_debug_o_expected[9] = 1'bX;
	pc_debug_o_expected[9] = #999000 1'b0;
end 
// expected pc_debug_o[ 8 ]
initial
begin
	pc_debug_o_expected[8] = 1'bX;
	pc_debug_o_expected[8] = #999000 1'b0;
end 
// expected pc_debug_o[ 7 ]
initial
begin
	pc_debug_o_expected[7] = 1'bX;
	pc_debug_o_expected[7] = #999000 1'b0;
end 
// expected pc_debug_o[ 6 ]
initial
begin
	pc_debug_o_expected[6] = 1'bX;
	pc_debug_o_expected[6] = #999000 1'b0;
end 
// expected pc_debug_o[ 5 ]
initial
begin
	pc_debug_o_expected[5] = 1'bX;
	pc_debug_o_expected[5] = #999000 1'b0;
end 
// expected pc_debug_o[ 4 ]
initial
begin
	pc_debug_o_expected[4] = 1'bX;
	pc_debug_o_expected[4] = #999000 1'b0;
end 
// expected pc_debug_o[ 3 ]
initial
begin
	pc_debug_o_expected[3] = 1'bX;
	pc_debug_o_expected[3] = #999000 1'b0;
end 
// expected pc_debug_o[ 2 ]
initial
begin
	pc_debug_o_expected[2] = 1'bX;
	pc_debug_o_expected[2] = #999000 1'b0;
end 
// expected pc_debug_o[ 1 ]
initial
begin
	pc_debug_o_expected[1] = 1'bX;
	pc_debug_o_expected[1] = #999000 1'b0;
end 
// expected pc_debug_o[ 0 ]
initial
begin
	pc_debug_o_expected[0] = 1'bX;
	pc_debug_o_expected[0] = #999000 1'b0;
end 
// expected HADDR[ 31 ]
initial
begin
	HADDR_expected[31] = 1'bX;
	HADDR_expected[31] = #999000 1'b0;
end 
// expected HADDR[ 30 ]
initial
begin
	HADDR_expected[30] = 1'bX;
	HADDR_expected[30] = #999000 1'b0;
end 
// expected HADDR[ 29 ]
initial
begin
	HADDR_expected[29] = 1'bX;
	HADDR_expected[29] = #999000 1'b0;
end 
// expected HADDR[ 28 ]
initial
begin
	HADDR_expected[28] = 1'bX;
	HADDR_expected[28] = #999000 1'b0;
end 
// expected HADDR[ 27 ]
initial
begin
	HADDR_expected[27] = 1'bX;
	HADDR_expected[27] = #999000 1'b0;
end 
// expected HADDR[ 26 ]
initial
begin
	HADDR_expected[26] = 1'bX;
	HADDR_expected[26] = #999000 1'b0;
end 
// expected HADDR[ 25 ]
initial
begin
	HADDR_expected[25] = 1'bX;
	HADDR_expected[25] = #999000 1'b0;
end 
// expected HADDR[ 24 ]
initial
begin
	HADDR_expected[24] = 1'bX;
	HADDR_expected[24] = #999000 1'b0;
end 
// expected HADDR[ 23 ]
initial
begin
	HADDR_expected[23] = 1'bX;
	HADDR_expected[23] = #999000 1'b0;
end 
// expected HADDR[ 22 ]
initial
begin
	HADDR_expected[22] = 1'bX;
	HADDR_expected[22] = #999000 1'b0;
end 
// expected HADDR[ 21 ]
initial
begin
	HADDR_expected[21] = 1'bX;
	HADDR_expected[21] = #999000 1'b0;
end 
// expected HADDR[ 20 ]
initial
begin
	HADDR_expected[20] = 1'bX;
	HADDR_expected[20] = #999000 1'b0;
end 
// expected HADDR[ 19 ]
initial
begin
	HADDR_expected[19] = 1'bX;
	HADDR_expected[19] = #999000 1'b0;
end 
// expected HADDR[ 18 ]
initial
begin
	HADDR_expected[18] = 1'bX;
	HADDR_expected[18] = #999000 1'b0;
end 
// expected HADDR[ 17 ]
initial
begin
	HADDR_expected[17] = 1'bX;
	HADDR_expected[17] = #999000 1'b0;
end 
// expected HADDR[ 16 ]
initial
begin
	HADDR_expected[16] = 1'bX;
	HADDR_expected[16] = #999000 1'b0;
end 
// expected HADDR[ 15 ]
initial
begin
	HADDR_expected[15] = 1'bX;
	HADDR_expected[15] = #999000 1'b0;
end 
// expected HADDR[ 14 ]
initial
begin
	HADDR_expected[14] = 1'bX;
	HADDR_expected[14] = #999000 1'b0;
end 
// expected HADDR[ 13 ]
initial
begin
	HADDR_expected[13] = 1'bX;
	HADDR_expected[13] = #999000 1'b0;
end 
// expected HADDR[ 12 ]
initial
begin
	HADDR_expected[12] = 1'bX;
	HADDR_expected[12] = #999000 1'b0;
end 
// expected HADDR[ 11 ]
initial
begin
	HADDR_expected[11] = 1'bX;
	HADDR_expected[11] = #999000 1'b0;
end 
// expected HADDR[ 10 ]
initial
begin
	HADDR_expected[10] = 1'bX;
	HADDR_expected[10] = #999000 1'b0;
end 
// expected HADDR[ 9 ]
initial
begin
	HADDR_expected[9] = 1'bX;
	HADDR_expected[9] = #999000 1'b0;
end 
// expected HADDR[ 8 ]
initial
begin
	HADDR_expected[8] = 1'bX;
	HADDR_expected[8] = #999000 1'b0;
end 
// expected HADDR[ 7 ]
initial
begin
	HADDR_expected[7] = 1'bX;
	HADDR_expected[7] = #999000 1'b0;
end 
// expected HADDR[ 6 ]
initial
begin
	HADDR_expected[6] = 1'bX;
	HADDR_expected[6] = #999000 1'b0;
end 
// expected HADDR[ 5 ]
initial
begin
	HADDR_expected[5] = 1'bX;
	HADDR_expected[5] = #999000 1'b0;
end 
// expected HADDR[ 4 ]
initial
begin
	HADDR_expected[4] = 1'bX;
	HADDR_expected[4] = #999000 1'b0;
end 
// expected HADDR[ 3 ]
initial
begin
	HADDR_expected[3] = 1'bX;
	HADDR_expected[3] = #999000 1'b0;
end 
// expected HADDR[ 2 ]
initial
begin
	HADDR_expected[2] = 1'bX;
	HADDR_expected[2] = #999000 1'b0;
end 
// expected HADDR[ 1 ]
initial
begin
	HADDR_expected[1] = 1'bX;
	HADDR_expected[1] = #999000 1'b0;
end 
// expected HADDR[ 0 ]
initial
begin
	HADDR_expected[0] = 1'bX;
	HADDR_expected[0] = #999000 1'b0;
end 
// generate trigger
always @(HADDR_expected or HADDR or HRDATA_expected or HRDATA or UART_TXD_expected or UART_TXD or baud_tick_expected or baud_tick or data_io_lcd_o_expected or data_io_lcd_o or data_io_ledr_o_expected or data_io_ledr_o or data_out_expected or data_out or data_trans_expected or data_trans or pc_debug_o_expected or pc_debug_o)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected HADDR = %b | expected HRDATA = %b | expected UART_TXD = %b | expected baud_tick = %b | expected data_io_lcd_o = %b | expected data_io_ledr_o = %b | expected data_out = %b | expected data_trans = %b | expected pc_debug_o = %b | ",HADDR_expected_prev,HRDATA_expected_prev,UART_TXD_expected_prev,baud_tick_expected_prev,data_io_lcd_o_expected_prev,data_io_ledr_o_expected_prev,data_out_expected_prev,data_trans_expected_prev,pc_debug_o_expected_prev);
	$display("| real HADDR = %b | real HRDATA = %b | real UART_TXD = %b | real baud_tick = %b | real data_io_lcd_o = %b | real data_io_ledr_o = %b | real data_out = %b | real data_trans = %b | real pc_debug_o = %b | ",HADDR_prev,HRDATA_prev,UART_TXD_prev,baud_tick_prev,data_io_lcd_o_prev,data_io_ledr_o_prev,data_out_prev,data_trans_prev,pc_debug_o_prev);
`endif
	if (
		( HADDR_expected_prev[0] !== 1'bx ) && ( HADDR_prev[0] !== HADDR_expected_prev[0] )
		&& ((HADDR_expected_prev[0] !== last_HADDR_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HADDR[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HADDR_expected_prev);
		$display ("     Real value = %b", HADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_HADDR_exp[0] = HADDR_expected_prev[0];
	end
	if (
		( HADDR_expected_prev[1] !== 1'bx ) && ( HADDR_prev[1] !== HADDR_expected_prev[1] )
		&& ((HADDR_expected_prev[1] !== last_HADDR_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HADDR[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HADDR_expected_prev);
		$display ("     Real value = %b", HADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_HADDR_exp[1] = HADDR_expected_prev[1];
	end
	if (
		( HADDR_expected_prev[2] !== 1'bx ) && ( HADDR_prev[2] !== HADDR_expected_prev[2] )
		&& ((HADDR_expected_prev[2] !== last_HADDR_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HADDR[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HADDR_expected_prev);
		$display ("     Real value = %b", HADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_HADDR_exp[2] = HADDR_expected_prev[2];
	end
	if (
		( HADDR_expected_prev[3] !== 1'bx ) && ( HADDR_prev[3] !== HADDR_expected_prev[3] )
		&& ((HADDR_expected_prev[3] !== last_HADDR_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HADDR[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HADDR_expected_prev);
		$display ("     Real value = %b", HADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_HADDR_exp[3] = HADDR_expected_prev[3];
	end
	if (
		( HADDR_expected_prev[4] !== 1'bx ) && ( HADDR_prev[4] !== HADDR_expected_prev[4] )
		&& ((HADDR_expected_prev[4] !== last_HADDR_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HADDR[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HADDR_expected_prev);
		$display ("     Real value = %b", HADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_HADDR_exp[4] = HADDR_expected_prev[4];
	end
	if (
		( HADDR_expected_prev[5] !== 1'bx ) && ( HADDR_prev[5] !== HADDR_expected_prev[5] )
		&& ((HADDR_expected_prev[5] !== last_HADDR_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HADDR[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HADDR_expected_prev);
		$display ("     Real value = %b", HADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_HADDR_exp[5] = HADDR_expected_prev[5];
	end
	if (
		( HADDR_expected_prev[6] !== 1'bx ) && ( HADDR_prev[6] !== HADDR_expected_prev[6] )
		&& ((HADDR_expected_prev[6] !== last_HADDR_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HADDR[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HADDR_expected_prev);
		$display ("     Real value = %b", HADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_HADDR_exp[6] = HADDR_expected_prev[6];
	end
	if (
		( HADDR_expected_prev[7] !== 1'bx ) && ( HADDR_prev[7] !== HADDR_expected_prev[7] )
		&& ((HADDR_expected_prev[7] !== last_HADDR_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HADDR[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HADDR_expected_prev);
		$display ("     Real value = %b", HADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_HADDR_exp[7] = HADDR_expected_prev[7];
	end
	if (
		( HADDR_expected_prev[8] !== 1'bx ) && ( HADDR_prev[8] !== HADDR_expected_prev[8] )
		&& ((HADDR_expected_prev[8] !== last_HADDR_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HADDR[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HADDR_expected_prev);
		$display ("     Real value = %b", HADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_HADDR_exp[8] = HADDR_expected_prev[8];
	end
	if (
		( HADDR_expected_prev[9] !== 1'bx ) && ( HADDR_prev[9] !== HADDR_expected_prev[9] )
		&& ((HADDR_expected_prev[9] !== last_HADDR_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HADDR[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HADDR_expected_prev);
		$display ("     Real value = %b", HADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_HADDR_exp[9] = HADDR_expected_prev[9];
	end
	if (
		( HADDR_expected_prev[10] !== 1'bx ) && ( HADDR_prev[10] !== HADDR_expected_prev[10] )
		&& ((HADDR_expected_prev[10] !== last_HADDR_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HADDR[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HADDR_expected_prev);
		$display ("     Real value = %b", HADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_HADDR_exp[10] = HADDR_expected_prev[10];
	end
	if (
		( HADDR_expected_prev[11] !== 1'bx ) && ( HADDR_prev[11] !== HADDR_expected_prev[11] )
		&& ((HADDR_expected_prev[11] !== last_HADDR_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HADDR[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HADDR_expected_prev);
		$display ("     Real value = %b", HADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_HADDR_exp[11] = HADDR_expected_prev[11];
	end
	if (
		( HADDR_expected_prev[12] !== 1'bx ) && ( HADDR_prev[12] !== HADDR_expected_prev[12] )
		&& ((HADDR_expected_prev[12] !== last_HADDR_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HADDR[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HADDR_expected_prev);
		$display ("     Real value = %b", HADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_HADDR_exp[12] = HADDR_expected_prev[12];
	end
	if (
		( HADDR_expected_prev[13] !== 1'bx ) && ( HADDR_prev[13] !== HADDR_expected_prev[13] )
		&& ((HADDR_expected_prev[13] !== last_HADDR_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HADDR[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HADDR_expected_prev);
		$display ("     Real value = %b", HADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_HADDR_exp[13] = HADDR_expected_prev[13];
	end
	if (
		( HADDR_expected_prev[14] !== 1'bx ) && ( HADDR_prev[14] !== HADDR_expected_prev[14] )
		&& ((HADDR_expected_prev[14] !== last_HADDR_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HADDR[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HADDR_expected_prev);
		$display ("     Real value = %b", HADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_HADDR_exp[14] = HADDR_expected_prev[14];
	end
	if (
		( HADDR_expected_prev[15] !== 1'bx ) && ( HADDR_prev[15] !== HADDR_expected_prev[15] )
		&& ((HADDR_expected_prev[15] !== last_HADDR_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HADDR[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HADDR_expected_prev);
		$display ("     Real value = %b", HADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_HADDR_exp[15] = HADDR_expected_prev[15];
	end
	if (
		( HADDR_expected_prev[16] !== 1'bx ) && ( HADDR_prev[16] !== HADDR_expected_prev[16] )
		&& ((HADDR_expected_prev[16] !== last_HADDR_exp[16]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HADDR[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HADDR_expected_prev);
		$display ("     Real value = %b", HADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_HADDR_exp[16] = HADDR_expected_prev[16];
	end
	if (
		( HADDR_expected_prev[17] !== 1'bx ) && ( HADDR_prev[17] !== HADDR_expected_prev[17] )
		&& ((HADDR_expected_prev[17] !== last_HADDR_exp[17]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HADDR[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HADDR_expected_prev);
		$display ("     Real value = %b", HADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_HADDR_exp[17] = HADDR_expected_prev[17];
	end
	if (
		( HADDR_expected_prev[18] !== 1'bx ) && ( HADDR_prev[18] !== HADDR_expected_prev[18] )
		&& ((HADDR_expected_prev[18] !== last_HADDR_exp[18]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HADDR[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HADDR_expected_prev);
		$display ("     Real value = %b", HADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_HADDR_exp[18] = HADDR_expected_prev[18];
	end
	if (
		( HADDR_expected_prev[19] !== 1'bx ) && ( HADDR_prev[19] !== HADDR_expected_prev[19] )
		&& ((HADDR_expected_prev[19] !== last_HADDR_exp[19]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HADDR[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HADDR_expected_prev);
		$display ("     Real value = %b", HADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_HADDR_exp[19] = HADDR_expected_prev[19];
	end
	if (
		( HADDR_expected_prev[20] !== 1'bx ) && ( HADDR_prev[20] !== HADDR_expected_prev[20] )
		&& ((HADDR_expected_prev[20] !== last_HADDR_exp[20]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HADDR[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HADDR_expected_prev);
		$display ("     Real value = %b", HADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_HADDR_exp[20] = HADDR_expected_prev[20];
	end
	if (
		( HADDR_expected_prev[21] !== 1'bx ) && ( HADDR_prev[21] !== HADDR_expected_prev[21] )
		&& ((HADDR_expected_prev[21] !== last_HADDR_exp[21]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HADDR[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HADDR_expected_prev);
		$display ("     Real value = %b", HADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_HADDR_exp[21] = HADDR_expected_prev[21];
	end
	if (
		( HADDR_expected_prev[22] !== 1'bx ) && ( HADDR_prev[22] !== HADDR_expected_prev[22] )
		&& ((HADDR_expected_prev[22] !== last_HADDR_exp[22]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HADDR[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HADDR_expected_prev);
		$display ("     Real value = %b", HADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_HADDR_exp[22] = HADDR_expected_prev[22];
	end
	if (
		( HADDR_expected_prev[23] !== 1'bx ) && ( HADDR_prev[23] !== HADDR_expected_prev[23] )
		&& ((HADDR_expected_prev[23] !== last_HADDR_exp[23]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HADDR[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HADDR_expected_prev);
		$display ("     Real value = %b", HADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_HADDR_exp[23] = HADDR_expected_prev[23];
	end
	if (
		( HADDR_expected_prev[24] !== 1'bx ) && ( HADDR_prev[24] !== HADDR_expected_prev[24] )
		&& ((HADDR_expected_prev[24] !== last_HADDR_exp[24]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HADDR[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HADDR_expected_prev);
		$display ("     Real value = %b", HADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_HADDR_exp[24] = HADDR_expected_prev[24];
	end
	if (
		( HADDR_expected_prev[25] !== 1'bx ) && ( HADDR_prev[25] !== HADDR_expected_prev[25] )
		&& ((HADDR_expected_prev[25] !== last_HADDR_exp[25]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HADDR[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HADDR_expected_prev);
		$display ("     Real value = %b", HADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_HADDR_exp[25] = HADDR_expected_prev[25];
	end
	if (
		( HADDR_expected_prev[26] !== 1'bx ) && ( HADDR_prev[26] !== HADDR_expected_prev[26] )
		&& ((HADDR_expected_prev[26] !== last_HADDR_exp[26]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HADDR[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HADDR_expected_prev);
		$display ("     Real value = %b", HADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_HADDR_exp[26] = HADDR_expected_prev[26];
	end
	if (
		( HADDR_expected_prev[27] !== 1'bx ) && ( HADDR_prev[27] !== HADDR_expected_prev[27] )
		&& ((HADDR_expected_prev[27] !== last_HADDR_exp[27]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HADDR[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HADDR_expected_prev);
		$display ("     Real value = %b", HADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_HADDR_exp[27] = HADDR_expected_prev[27];
	end
	if (
		( HADDR_expected_prev[28] !== 1'bx ) && ( HADDR_prev[28] !== HADDR_expected_prev[28] )
		&& ((HADDR_expected_prev[28] !== last_HADDR_exp[28]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HADDR[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HADDR_expected_prev);
		$display ("     Real value = %b", HADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_HADDR_exp[28] = HADDR_expected_prev[28];
	end
	if (
		( HADDR_expected_prev[29] !== 1'bx ) && ( HADDR_prev[29] !== HADDR_expected_prev[29] )
		&& ((HADDR_expected_prev[29] !== last_HADDR_exp[29]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HADDR[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HADDR_expected_prev);
		$display ("     Real value = %b", HADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_HADDR_exp[29] = HADDR_expected_prev[29];
	end
	if (
		( HADDR_expected_prev[30] !== 1'bx ) && ( HADDR_prev[30] !== HADDR_expected_prev[30] )
		&& ((HADDR_expected_prev[30] !== last_HADDR_exp[30]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HADDR[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HADDR_expected_prev);
		$display ("     Real value = %b", HADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_HADDR_exp[30] = HADDR_expected_prev[30];
	end
	if (
		( HADDR_expected_prev[31] !== 1'bx ) && ( HADDR_prev[31] !== HADDR_expected_prev[31] )
		&& ((HADDR_expected_prev[31] !== last_HADDR_exp[31]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HADDR[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HADDR_expected_prev);
		$display ("     Real value = %b", HADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_HADDR_exp[31] = HADDR_expected_prev[31];
	end
	if (
		( HRDATA_expected_prev[0] !== 1'bx ) && ( HRDATA_prev[0] !== HRDATA_expected_prev[0] )
		&& ((HRDATA_expected_prev[0] !== last_HRDATA_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HRDATA[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HRDATA_expected_prev);
		$display ("     Real value = %b", HRDATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_HRDATA_exp[0] = HRDATA_expected_prev[0];
	end
	if (
		( HRDATA_expected_prev[1] !== 1'bx ) && ( HRDATA_prev[1] !== HRDATA_expected_prev[1] )
		&& ((HRDATA_expected_prev[1] !== last_HRDATA_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HRDATA[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HRDATA_expected_prev);
		$display ("     Real value = %b", HRDATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_HRDATA_exp[1] = HRDATA_expected_prev[1];
	end
	if (
		( HRDATA_expected_prev[2] !== 1'bx ) && ( HRDATA_prev[2] !== HRDATA_expected_prev[2] )
		&& ((HRDATA_expected_prev[2] !== last_HRDATA_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HRDATA[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HRDATA_expected_prev);
		$display ("     Real value = %b", HRDATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_HRDATA_exp[2] = HRDATA_expected_prev[2];
	end
	if (
		( HRDATA_expected_prev[3] !== 1'bx ) && ( HRDATA_prev[3] !== HRDATA_expected_prev[3] )
		&& ((HRDATA_expected_prev[3] !== last_HRDATA_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HRDATA[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HRDATA_expected_prev);
		$display ("     Real value = %b", HRDATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_HRDATA_exp[3] = HRDATA_expected_prev[3];
	end
	if (
		( HRDATA_expected_prev[4] !== 1'bx ) && ( HRDATA_prev[4] !== HRDATA_expected_prev[4] )
		&& ((HRDATA_expected_prev[4] !== last_HRDATA_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HRDATA[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HRDATA_expected_prev);
		$display ("     Real value = %b", HRDATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_HRDATA_exp[4] = HRDATA_expected_prev[4];
	end
	if (
		( HRDATA_expected_prev[5] !== 1'bx ) && ( HRDATA_prev[5] !== HRDATA_expected_prev[5] )
		&& ((HRDATA_expected_prev[5] !== last_HRDATA_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HRDATA[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HRDATA_expected_prev);
		$display ("     Real value = %b", HRDATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_HRDATA_exp[5] = HRDATA_expected_prev[5];
	end
	if (
		( HRDATA_expected_prev[6] !== 1'bx ) && ( HRDATA_prev[6] !== HRDATA_expected_prev[6] )
		&& ((HRDATA_expected_prev[6] !== last_HRDATA_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HRDATA[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HRDATA_expected_prev);
		$display ("     Real value = %b", HRDATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_HRDATA_exp[6] = HRDATA_expected_prev[6];
	end
	if (
		( HRDATA_expected_prev[7] !== 1'bx ) && ( HRDATA_prev[7] !== HRDATA_expected_prev[7] )
		&& ((HRDATA_expected_prev[7] !== last_HRDATA_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HRDATA[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HRDATA_expected_prev);
		$display ("     Real value = %b", HRDATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_HRDATA_exp[7] = HRDATA_expected_prev[7];
	end
	if (
		( HRDATA_expected_prev[8] !== 1'bx ) && ( HRDATA_prev[8] !== HRDATA_expected_prev[8] )
		&& ((HRDATA_expected_prev[8] !== last_HRDATA_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HRDATA[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HRDATA_expected_prev);
		$display ("     Real value = %b", HRDATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_HRDATA_exp[8] = HRDATA_expected_prev[8];
	end
	if (
		( HRDATA_expected_prev[9] !== 1'bx ) && ( HRDATA_prev[9] !== HRDATA_expected_prev[9] )
		&& ((HRDATA_expected_prev[9] !== last_HRDATA_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HRDATA[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HRDATA_expected_prev);
		$display ("     Real value = %b", HRDATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_HRDATA_exp[9] = HRDATA_expected_prev[9];
	end
	if (
		( HRDATA_expected_prev[10] !== 1'bx ) && ( HRDATA_prev[10] !== HRDATA_expected_prev[10] )
		&& ((HRDATA_expected_prev[10] !== last_HRDATA_exp[10]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HRDATA[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HRDATA_expected_prev);
		$display ("     Real value = %b", HRDATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_HRDATA_exp[10] = HRDATA_expected_prev[10];
	end
	if (
		( HRDATA_expected_prev[11] !== 1'bx ) && ( HRDATA_prev[11] !== HRDATA_expected_prev[11] )
		&& ((HRDATA_expected_prev[11] !== last_HRDATA_exp[11]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HRDATA[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HRDATA_expected_prev);
		$display ("     Real value = %b", HRDATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_HRDATA_exp[11] = HRDATA_expected_prev[11];
	end
	if (
		( HRDATA_expected_prev[12] !== 1'bx ) && ( HRDATA_prev[12] !== HRDATA_expected_prev[12] )
		&& ((HRDATA_expected_prev[12] !== last_HRDATA_exp[12]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HRDATA[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HRDATA_expected_prev);
		$display ("     Real value = %b", HRDATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_HRDATA_exp[12] = HRDATA_expected_prev[12];
	end
	if (
		( HRDATA_expected_prev[13] !== 1'bx ) && ( HRDATA_prev[13] !== HRDATA_expected_prev[13] )
		&& ((HRDATA_expected_prev[13] !== last_HRDATA_exp[13]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HRDATA[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HRDATA_expected_prev);
		$display ("     Real value = %b", HRDATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_HRDATA_exp[13] = HRDATA_expected_prev[13];
	end
	if (
		( HRDATA_expected_prev[14] !== 1'bx ) && ( HRDATA_prev[14] !== HRDATA_expected_prev[14] )
		&& ((HRDATA_expected_prev[14] !== last_HRDATA_exp[14]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HRDATA[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HRDATA_expected_prev);
		$display ("     Real value = %b", HRDATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_HRDATA_exp[14] = HRDATA_expected_prev[14];
	end
	if (
		( HRDATA_expected_prev[15] !== 1'bx ) && ( HRDATA_prev[15] !== HRDATA_expected_prev[15] )
		&& ((HRDATA_expected_prev[15] !== last_HRDATA_exp[15]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HRDATA[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HRDATA_expected_prev);
		$display ("     Real value = %b", HRDATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_HRDATA_exp[15] = HRDATA_expected_prev[15];
	end
	if (
		( HRDATA_expected_prev[16] !== 1'bx ) && ( HRDATA_prev[16] !== HRDATA_expected_prev[16] )
		&& ((HRDATA_expected_prev[16] !== last_HRDATA_exp[16]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HRDATA[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HRDATA_expected_prev);
		$display ("     Real value = %b", HRDATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_HRDATA_exp[16] = HRDATA_expected_prev[16];
	end
	if (
		( HRDATA_expected_prev[17] !== 1'bx ) && ( HRDATA_prev[17] !== HRDATA_expected_prev[17] )
		&& ((HRDATA_expected_prev[17] !== last_HRDATA_exp[17]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HRDATA[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HRDATA_expected_prev);
		$display ("     Real value = %b", HRDATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_HRDATA_exp[17] = HRDATA_expected_prev[17];
	end
	if (
		( HRDATA_expected_prev[18] !== 1'bx ) && ( HRDATA_prev[18] !== HRDATA_expected_prev[18] )
		&& ((HRDATA_expected_prev[18] !== last_HRDATA_exp[18]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HRDATA[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HRDATA_expected_prev);
		$display ("     Real value = %b", HRDATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_HRDATA_exp[18] = HRDATA_expected_prev[18];
	end
	if (
		( HRDATA_expected_prev[19] !== 1'bx ) && ( HRDATA_prev[19] !== HRDATA_expected_prev[19] )
		&& ((HRDATA_expected_prev[19] !== last_HRDATA_exp[19]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HRDATA[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HRDATA_expected_prev);
		$display ("     Real value = %b", HRDATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_HRDATA_exp[19] = HRDATA_expected_prev[19];
	end
	if (
		( HRDATA_expected_prev[20] !== 1'bx ) && ( HRDATA_prev[20] !== HRDATA_expected_prev[20] )
		&& ((HRDATA_expected_prev[20] !== last_HRDATA_exp[20]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HRDATA[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HRDATA_expected_prev);
		$display ("     Real value = %b", HRDATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_HRDATA_exp[20] = HRDATA_expected_prev[20];
	end
	if (
		( HRDATA_expected_prev[21] !== 1'bx ) && ( HRDATA_prev[21] !== HRDATA_expected_prev[21] )
		&& ((HRDATA_expected_prev[21] !== last_HRDATA_exp[21]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HRDATA[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HRDATA_expected_prev);
		$display ("     Real value = %b", HRDATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_HRDATA_exp[21] = HRDATA_expected_prev[21];
	end
	if (
		( HRDATA_expected_prev[22] !== 1'bx ) && ( HRDATA_prev[22] !== HRDATA_expected_prev[22] )
		&& ((HRDATA_expected_prev[22] !== last_HRDATA_exp[22]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HRDATA[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HRDATA_expected_prev);
		$display ("     Real value = %b", HRDATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_HRDATA_exp[22] = HRDATA_expected_prev[22];
	end
	if (
		( HRDATA_expected_prev[23] !== 1'bx ) && ( HRDATA_prev[23] !== HRDATA_expected_prev[23] )
		&& ((HRDATA_expected_prev[23] !== last_HRDATA_exp[23]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HRDATA[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HRDATA_expected_prev);
		$display ("     Real value = %b", HRDATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_HRDATA_exp[23] = HRDATA_expected_prev[23];
	end
	if (
		( HRDATA_expected_prev[24] !== 1'bx ) && ( HRDATA_prev[24] !== HRDATA_expected_prev[24] )
		&& ((HRDATA_expected_prev[24] !== last_HRDATA_exp[24]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HRDATA[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HRDATA_expected_prev);
		$display ("     Real value = %b", HRDATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_HRDATA_exp[24] = HRDATA_expected_prev[24];
	end
	if (
		( HRDATA_expected_prev[25] !== 1'bx ) && ( HRDATA_prev[25] !== HRDATA_expected_prev[25] )
		&& ((HRDATA_expected_prev[25] !== last_HRDATA_exp[25]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HRDATA[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HRDATA_expected_prev);
		$display ("     Real value = %b", HRDATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_HRDATA_exp[25] = HRDATA_expected_prev[25];
	end
	if (
		( HRDATA_expected_prev[26] !== 1'bx ) && ( HRDATA_prev[26] !== HRDATA_expected_prev[26] )
		&& ((HRDATA_expected_prev[26] !== last_HRDATA_exp[26]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HRDATA[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HRDATA_expected_prev);
		$display ("     Real value = %b", HRDATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_HRDATA_exp[26] = HRDATA_expected_prev[26];
	end
	if (
		( HRDATA_expected_prev[27] !== 1'bx ) && ( HRDATA_prev[27] !== HRDATA_expected_prev[27] )
		&& ((HRDATA_expected_prev[27] !== last_HRDATA_exp[27]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HRDATA[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HRDATA_expected_prev);
		$display ("     Real value = %b", HRDATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_HRDATA_exp[27] = HRDATA_expected_prev[27];
	end
	if (
		( HRDATA_expected_prev[28] !== 1'bx ) && ( HRDATA_prev[28] !== HRDATA_expected_prev[28] )
		&& ((HRDATA_expected_prev[28] !== last_HRDATA_exp[28]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HRDATA[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HRDATA_expected_prev);
		$display ("     Real value = %b", HRDATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_HRDATA_exp[28] = HRDATA_expected_prev[28];
	end
	if (
		( HRDATA_expected_prev[29] !== 1'bx ) && ( HRDATA_prev[29] !== HRDATA_expected_prev[29] )
		&& ((HRDATA_expected_prev[29] !== last_HRDATA_exp[29]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HRDATA[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HRDATA_expected_prev);
		$display ("     Real value = %b", HRDATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_HRDATA_exp[29] = HRDATA_expected_prev[29];
	end
	if (
		( HRDATA_expected_prev[30] !== 1'bx ) && ( HRDATA_prev[30] !== HRDATA_expected_prev[30] )
		&& ((HRDATA_expected_prev[30] !== last_HRDATA_exp[30]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HRDATA[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HRDATA_expected_prev);
		$display ("     Real value = %b", HRDATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_HRDATA_exp[30] = HRDATA_expected_prev[30];
	end
	if (
		( HRDATA_expected_prev[31] !== 1'bx ) && ( HRDATA_prev[31] !== HRDATA_expected_prev[31] )
		&& ((HRDATA_expected_prev[31] !== last_HRDATA_exp[31]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HRDATA[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HRDATA_expected_prev);
		$display ("     Real value = %b", HRDATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_HRDATA_exp[31] = HRDATA_expected_prev[31];
	end
	if (
		( UART_TXD_expected_prev !== 1'bx ) && ( UART_TXD_prev !== UART_TXD_expected_prev )
		&& ((UART_TXD_expected_prev !== last_UART_TXD_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port UART_TXD :: @time = %t",  $realtime);
		$display ("     Expected value = %b", UART_TXD_expected_prev);
		$display ("     Real value = %b", UART_TXD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_UART_TXD_exp = UART_TXD_expected_prev;
	end
	if (
		( baud_tick_expected_prev !== 1'bx ) && ( baud_tick_prev !== baud_tick_expected_prev )
		&& ((baud_tick_expected_prev !== last_baud_tick_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port baud_tick :: @time = %t",  $realtime);
		$display ("     Expected value = %b", baud_tick_expected_prev);
		$display ("     Real value = %b", baud_tick_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_baud_tick_exp = baud_tick_expected_prev;
	end
	if (
		( data_io_lcd_o_expected_prev[0] !== 1'bx ) && ( data_io_lcd_o_prev[0] !== data_io_lcd_o_expected_prev[0] )
		&& ((data_io_lcd_o_expected_prev[0] !== last_data_io_lcd_o_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_io_lcd_o[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_io_lcd_o_expected_prev);
		$display ("     Real value = %b", data_io_lcd_o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_data_io_lcd_o_exp[0] = data_io_lcd_o_expected_prev[0];
	end
	if (
		( data_io_lcd_o_expected_prev[1] !== 1'bx ) && ( data_io_lcd_o_prev[1] !== data_io_lcd_o_expected_prev[1] )
		&& ((data_io_lcd_o_expected_prev[1] !== last_data_io_lcd_o_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_io_lcd_o[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_io_lcd_o_expected_prev);
		$display ("     Real value = %b", data_io_lcd_o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_data_io_lcd_o_exp[1] = data_io_lcd_o_expected_prev[1];
	end
	if (
		( data_io_lcd_o_expected_prev[2] !== 1'bx ) && ( data_io_lcd_o_prev[2] !== data_io_lcd_o_expected_prev[2] )
		&& ((data_io_lcd_o_expected_prev[2] !== last_data_io_lcd_o_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_io_lcd_o[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_io_lcd_o_expected_prev);
		$display ("     Real value = %b", data_io_lcd_o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_data_io_lcd_o_exp[2] = data_io_lcd_o_expected_prev[2];
	end
	if (
		( data_io_lcd_o_expected_prev[3] !== 1'bx ) && ( data_io_lcd_o_prev[3] !== data_io_lcd_o_expected_prev[3] )
		&& ((data_io_lcd_o_expected_prev[3] !== last_data_io_lcd_o_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_io_lcd_o[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_io_lcd_o_expected_prev);
		$display ("     Real value = %b", data_io_lcd_o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_data_io_lcd_o_exp[3] = data_io_lcd_o_expected_prev[3];
	end
	if (
		( data_io_lcd_o_expected_prev[4] !== 1'bx ) && ( data_io_lcd_o_prev[4] !== data_io_lcd_o_expected_prev[4] )
		&& ((data_io_lcd_o_expected_prev[4] !== last_data_io_lcd_o_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_io_lcd_o[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_io_lcd_o_expected_prev);
		$display ("     Real value = %b", data_io_lcd_o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_data_io_lcd_o_exp[4] = data_io_lcd_o_expected_prev[4];
	end
	if (
		( data_io_lcd_o_expected_prev[5] !== 1'bx ) && ( data_io_lcd_o_prev[5] !== data_io_lcd_o_expected_prev[5] )
		&& ((data_io_lcd_o_expected_prev[5] !== last_data_io_lcd_o_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_io_lcd_o[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_io_lcd_o_expected_prev);
		$display ("     Real value = %b", data_io_lcd_o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_data_io_lcd_o_exp[5] = data_io_lcd_o_expected_prev[5];
	end
	if (
		( data_io_lcd_o_expected_prev[6] !== 1'bx ) && ( data_io_lcd_o_prev[6] !== data_io_lcd_o_expected_prev[6] )
		&& ((data_io_lcd_o_expected_prev[6] !== last_data_io_lcd_o_exp[6]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_io_lcd_o[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_io_lcd_o_expected_prev);
		$display ("     Real value = %b", data_io_lcd_o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_data_io_lcd_o_exp[6] = data_io_lcd_o_expected_prev[6];
	end
	if (
		( data_io_lcd_o_expected_prev[7] !== 1'bx ) && ( data_io_lcd_o_prev[7] !== data_io_lcd_o_expected_prev[7] )
		&& ((data_io_lcd_o_expected_prev[7] !== last_data_io_lcd_o_exp[7]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_io_lcd_o[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_io_lcd_o_expected_prev);
		$display ("     Real value = %b", data_io_lcd_o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_data_io_lcd_o_exp[7] = data_io_lcd_o_expected_prev[7];
	end
	if (
		( data_io_lcd_o_expected_prev[8] !== 1'bx ) && ( data_io_lcd_o_prev[8] !== data_io_lcd_o_expected_prev[8] )
		&& ((data_io_lcd_o_expected_prev[8] !== last_data_io_lcd_o_exp[8]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_io_lcd_o[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_io_lcd_o_expected_prev);
		$display ("     Real value = %b", data_io_lcd_o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_data_io_lcd_o_exp[8] = data_io_lcd_o_expected_prev[8];
	end
	if (
		( data_io_lcd_o_expected_prev[9] !== 1'bx ) && ( data_io_lcd_o_prev[9] !== data_io_lcd_o_expected_prev[9] )
		&& ((data_io_lcd_o_expected_prev[9] !== last_data_io_lcd_o_exp[9]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_io_lcd_o[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_io_lcd_o_expected_prev);
		$display ("     Real value = %b", data_io_lcd_o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_data_io_lcd_o_exp[9] = data_io_lcd_o_expected_prev[9];
	end
	if (
		( data_io_lcd_o_expected_prev[10] !== 1'bx ) && ( data_io_lcd_o_prev[10] !== data_io_lcd_o_expected_prev[10] )
		&& ((data_io_lcd_o_expected_prev[10] !== last_data_io_lcd_o_exp[10]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_io_lcd_o[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_io_lcd_o_expected_prev);
		$display ("     Real value = %b", data_io_lcd_o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_data_io_lcd_o_exp[10] = data_io_lcd_o_expected_prev[10];
	end
	if (
		( data_io_lcd_o_expected_prev[11] !== 1'bx ) && ( data_io_lcd_o_prev[11] !== data_io_lcd_o_expected_prev[11] )
		&& ((data_io_lcd_o_expected_prev[11] !== last_data_io_lcd_o_exp[11]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_io_lcd_o[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_io_lcd_o_expected_prev);
		$display ("     Real value = %b", data_io_lcd_o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_data_io_lcd_o_exp[11] = data_io_lcd_o_expected_prev[11];
	end
	if (
		( data_io_lcd_o_expected_prev[12] !== 1'bx ) && ( data_io_lcd_o_prev[12] !== data_io_lcd_o_expected_prev[12] )
		&& ((data_io_lcd_o_expected_prev[12] !== last_data_io_lcd_o_exp[12]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_io_lcd_o[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_io_lcd_o_expected_prev);
		$display ("     Real value = %b", data_io_lcd_o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_data_io_lcd_o_exp[12] = data_io_lcd_o_expected_prev[12];
	end
	if (
		( data_io_lcd_o_expected_prev[13] !== 1'bx ) && ( data_io_lcd_o_prev[13] !== data_io_lcd_o_expected_prev[13] )
		&& ((data_io_lcd_o_expected_prev[13] !== last_data_io_lcd_o_exp[13]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_io_lcd_o[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_io_lcd_o_expected_prev);
		$display ("     Real value = %b", data_io_lcd_o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_data_io_lcd_o_exp[13] = data_io_lcd_o_expected_prev[13];
	end
	if (
		( data_io_lcd_o_expected_prev[14] !== 1'bx ) && ( data_io_lcd_o_prev[14] !== data_io_lcd_o_expected_prev[14] )
		&& ((data_io_lcd_o_expected_prev[14] !== last_data_io_lcd_o_exp[14]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_io_lcd_o[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_io_lcd_o_expected_prev);
		$display ("     Real value = %b", data_io_lcd_o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_data_io_lcd_o_exp[14] = data_io_lcd_o_expected_prev[14];
	end
	if (
		( data_io_lcd_o_expected_prev[15] !== 1'bx ) && ( data_io_lcd_o_prev[15] !== data_io_lcd_o_expected_prev[15] )
		&& ((data_io_lcd_o_expected_prev[15] !== last_data_io_lcd_o_exp[15]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_io_lcd_o[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_io_lcd_o_expected_prev);
		$display ("     Real value = %b", data_io_lcd_o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_data_io_lcd_o_exp[15] = data_io_lcd_o_expected_prev[15];
	end
	if (
		( data_io_lcd_o_expected_prev[16] !== 1'bx ) && ( data_io_lcd_o_prev[16] !== data_io_lcd_o_expected_prev[16] )
		&& ((data_io_lcd_o_expected_prev[16] !== last_data_io_lcd_o_exp[16]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_io_lcd_o[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_io_lcd_o_expected_prev);
		$display ("     Real value = %b", data_io_lcd_o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_data_io_lcd_o_exp[16] = data_io_lcd_o_expected_prev[16];
	end
	if (
		( data_io_lcd_o_expected_prev[17] !== 1'bx ) && ( data_io_lcd_o_prev[17] !== data_io_lcd_o_expected_prev[17] )
		&& ((data_io_lcd_o_expected_prev[17] !== last_data_io_lcd_o_exp[17]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_io_lcd_o[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_io_lcd_o_expected_prev);
		$display ("     Real value = %b", data_io_lcd_o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_data_io_lcd_o_exp[17] = data_io_lcd_o_expected_prev[17];
	end
	if (
		( data_io_lcd_o_expected_prev[18] !== 1'bx ) && ( data_io_lcd_o_prev[18] !== data_io_lcd_o_expected_prev[18] )
		&& ((data_io_lcd_o_expected_prev[18] !== last_data_io_lcd_o_exp[18]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_io_lcd_o[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_io_lcd_o_expected_prev);
		$display ("     Real value = %b", data_io_lcd_o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_data_io_lcd_o_exp[18] = data_io_lcd_o_expected_prev[18];
	end
	if (
		( data_io_lcd_o_expected_prev[19] !== 1'bx ) && ( data_io_lcd_o_prev[19] !== data_io_lcd_o_expected_prev[19] )
		&& ((data_io_lcd_o_expected_prev[19] !== last_data_io_lcd_o_exp[19]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_io_lcd_o[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_io_lcd_o_expected_prev);
		$display ("     Real value = %b", data_io_lcd_o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_data_io_lcd_o_exp[19] = data_io_lcd_o_expected_prev[19];
	end
	if (
		( data_io_lcd_o_expected_prev[20] !== 1'bx ) && ( data_io_lcd_o_prev[20] !== data_io_lcd_o_expected_prev[20] )
		&& ((data_io_lcd_o_expected_prev[20] !== last_data_io_lcd_o_exp[20]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_io_lcd_o[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_io_lcd_o_expected_prev);
		$display ("     Real value = %b", data_io_lcd_o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_data_io_lcd_o_exp[20] = data_io_lcd_o_expected_prev[20];
	end
	if (
		( data_io_lcd_o_expected_prev[21] !== 1'bx ) && ( data_io_lcd_o_prev[21] !== data_io_lcd_o_expected_prev[21] )
		&& ((data_io_lcd_o_expected_prev[21] !== last_data_io_lcd_o_exp[21]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_io_lcd_o[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_io_lcd_o_expected_prev);
		$display ("     Real value = %b", data_io_lcd_o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_data_io_lcd_o_exp[21] = data_io_lcd_o_expected_prev[21];
	end
	if (
		( data_io_lcd_o_expected_prev[22] !== 1'bx ) && ( data_io_lcd_o_prev[22] !== data_io_lcd_o_expected_prev[22] )
		&& ((data_io_lcd_o_expected_prev[22] !== last_data_io_lcd_o_exp[22]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_io_lcd_o[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_io_lcd_o_expected_prev);
		$display ("     Real value = %b", data_io_lcd_o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_data_io_lcd_o_exp[22] = data_io_lcd_o_expected_prev[22];
	end
	if (
		( data_io_lcd_o_expected_prev[23] !== 1'bx ) && ( data_io_lcd_o_prev[23] !== data_io_lcd_o_expected_prev[23] )
		&& ((data_io_lcd_o_expected_prev[23] !== last_data_io_lcd_o_exp[23]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_io_lcd_o[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_io_lcd_o_expected_prev);
		$display ("     Real value = %b", data_io_lcd_o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_data_io_lcd_o_exp[23] = data_io_lcd_o_expected_prev[23];
	end
	if (
		( data_io_lcd_o_expected_prev[24] !== 1'bx ) && ( data_io_lcd_o_prev[24] !== data_io_lcd_o_expected_prev[24] )
		&& ((data_io_lcd_o_expected_prev[24] !== last_data_io_lcd_o_exp[24]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_io_lcd_o[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_io_lcd_o_expected_prev);
		$display ("     Real value = %b", data_io_lcd_o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_data_io_lcd_o_exp[24] = data_io_lcd_o_expected_prev[24];
	end
	if (
		( data_io_lcd_o_expected_prev[25] !== 1'bx ) && ( data_io_lcd_o_prev[25] !== data_io_lcd_o_expected_prev[25] )
		&& ((data_io_lcd_o_expected_prev[25] !== last_data_io_lcd_o_exp[25]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_io_lcd_o[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_io_lcd_o_expected_prev);
		$display ("     Real value = %b", data_io_lcd_o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_data_io_lcd_o_exp[25] = data_io_lcd_o_expected_prev[25];
	end
	if (
		( data_io_lcd_o_expected_prev[26] !== 1'bx ) && ( data_io_lcd_o_prev[26] !== data_io_lcd_o_expected_prev[26] )
		&& ((data_io_lcd_o_expected_prev[26] !== last_data_io_lcd_o_exp[26]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_io_lcd_o[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_io_lcd_o_expected_prev);
		$display ("     Real value = %b", data_io_lcd_o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_data_io_lcd_o_exp[26] = data_io_lcd_o_expected_prev[26];
	end
	if (
		( data_io_lcd_o_expected_prev[27] !== 1'bx ) && ( data_io_lcd_o_prev[27] !== data_io_lcd_o_expected_prev[27] )
		&& ((data_io_lcd_o_expected_prev[27] !== last_data_io_lcd_o_exp[27]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_io_lcd_o[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_io_lcd_o_expected_prev);
		$display ("     Real value = %b", data_io_lcd_o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_data_io_lcd_o_exp[27] = data_io_lcd_o_expected_prev[27];
	end
	if (
		( data_io_lcd_o_expected_prev[28] !== 1'bx ) && ( data_io_lcd_o_prev[28] !== data_io_lcd_o_expected_prev[28] )
		&& ((data_io_lcd_o_expected_prev[28] !== last_data_io_lcd_o_exp[28]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_io_lcd_o[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_io_lcd_o_expected_prev);
		$display ("     Real value = %b", data_io_lcd_o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_data_io_lcd_o_exp[28] = data_io_lcd_o_expected_prev[28];
	end
	if (
		( data_io_lcd_o_expected_prev[29] !== 1'bx ) && ( data_io_lcd_o_prev[29] !== data_io_lcd_o_expected_prev[29] )
		&& ((data_io_lcd_o_expected_prev[29] !== last_data_io_lcd_o_exp[29]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_io_lcd_o[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_io_lcd_o_expected_prev);
		$display ("     Real value = %b", data_io_lcd_o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_data_io_lcd_o_exp[29] = data_io_lcd_o_expected_prev[29];
	end
	if (
		( data_io_lcd_o_expected_prev[30] !== 1'bx ) && ( data_io_lcd_o_prev[30] !== data_io_lcd_o_expected_prev[30] )
		&& ((data_io_lcd_o_expected_prev[30] !== last_data_io_lcd_o_exp[30]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_io_lcd_o[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_io_lcd_o_expected_prev);
		$display ("     Real value = %b", data_io_lcd_o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_data_io_lcd_o_exp[30] = data_io_lcd_o_expected_prev[30];
	end
	if (
		( data_io_lcd_o_expected_prev[31] !== 1'bx ) && ( data_io_lcd_o_prev[31] !== data_io_lcd_o_expected_prev[31] )
		&& ((data_io_lcd_o_expected_prev[31] !== last_data_io_lcd_o_exp[31]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_io_lcd_o[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_io_lcd_o_expected_prev);
		$display ("     Real value = %b", data_io_lcd_o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_data_io_lcd_o_exp[31] = data_io_lcd_o_expected_prev[31];
	end
	if (
		( data_io_ledr_o_expected_prev[0] !== 1'bx ) && ( data_io_ledr_o_prev[0] !== data_io_ledr_o_expected_prev[0] )
		&& ((data_io_ledr_o_expected_prev[0] !== last_data_io_ledr_o_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_io_ledr_o[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_io_ledr_o_expected_prev);
		$display ("     Real value = %b", data_io_ledr_o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_data_io_ledr_o_exp[0] = data_io_ledr_o_expected_prev[0];
	end
	if (
		( data_io_ledr_o_expected_prev[1] !== 1'bx ) && ( data_io_ledr_o_prev[1] !== data_io_ledr_o_expected_prev[1] )
		&& ((data_io_ledr_o_expected_prev[1] !== last_data_io_ledr_o_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_io_ledr_o[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_io_ledr_o_expected_prev);
		$display ("     Real value = %b", data_io_ledr_o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_data_io_ledr_o_exp[1] = data_io_ledr_o_expected_prev[1];
	end
	if (
		( data_io_ledr_o_expected_prev[2] !== 1'bx ) && ( data_io_ledr_o_prev[2] !== data_io_ledr_o_expected_prev[2] )
		&& ((data_io_ledr_o_expected_prev[2] !== last_data_io_ledr_o_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_io_ledr_o[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_io_ledr_o_expected_prev);
		$display ("     Real value = %b", data_io_ledr_o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_data_io_ledr_o_exp[2] = data_io_ledr_o_expected_prev[2];
	end
	if (
		( data_io_ledr_o_expected_prev[3] !== 1'bx ) && ( data_io_ledr_o_prev[3] !== data_io_ledr_o_expected_prev[3] )
		&& ((data_io_ledr_o_expected_prev[3] !== last_data_io_ledr_o_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_io_ledr_o[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_io_ledr_o_expected_prev);
		$display ("     Real value = %b", data_io_ledr_o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_data_io_ledr_o_exp[3] = data_io_ledr_o_expected_prev[3];
	end
	if (
		( data_io_ledr_o_expected_prev[4] !== 1'bx ) && ( data_io_ledr_o_prev[4] !== data_io_ledr_o_expected_prev[4] )
		&& ((data_io_ledr_o_expected_prev[4] !== last_data_io_ledr_o_exp[4]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_io_ledr_o[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_io_ledr_o_expected_prev);
		$display ("     Real value = %b", data_io_ledr_o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_data_io_ledr_o_exp[4] = data_io_ledr_o_expected_prev[4];
	end
	if (
		( data_io_ledr_o_expected_prev[5] !== 1'bx ) && ( data_io_ledr_o_prev[5] !== data_io_ledr_o_expected_prev[5] )
		&& ((data_io_ledr_o_expected_prev[5] !== last_data_io_ledr_o_exp[5]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_io_ledr_o[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_io_ledr_o_expected_prev);
		$display ("     Real value = %b", data_io_ledr_o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_data_io_ledr_o_exp[5] = data_io_ledr_o_expected_prev[5];
	end
	if (
		( data_io_ledr_o_expected_prev[6] !== 1'bx ) && ( data_io_ledr_o_prev[6] !== data_io_ledr_o_expected_prev[6] )
		&& ((data_io_ledr_o_expected_prev[6] !== last_data_io_ledr_o_exp[6]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_io_ledr_o[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_io_ledr_o_expected_prev);
		$display ("     Real value = %b", data_io_ledr_o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_data_io_ledr_o_exp[6] = data_io_ledr_o_expected_prev[6];
	end
	if (
		( data_io_ledr_o_expected_prev[7] !== 1'bx ) && ( data_io_ledr_o_prev[7] !== data_io_ledr_o_expected_prev[7] )
		&& ((data_io_ledr_o_expected_prev[7] !== last_data_io_ledr_o_exp[7]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_io_ledr_o[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_io_ledr_o_expected_prev);
		$display ("     Real value = %b", data_io_ledr_o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_data_io_ledr_o_exp[7] = data_io_ledr_o_expected_prev[7];
	end
	if (
		( data_io_ledr_o_expected_prev[8] !== 1'bx ) && ( data_io_ledr_o_prev[8] !== data_io_ledr_o_expected_prev[8] )
		&& ((data_io_ledr_o_expected_prev[8] !== last_data_io_ledr_o_exp[8]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_io_ledr_o[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_io_ledr_o_expected_prev);
		$display ("     Real value = %b", data_io_ledr_o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_data_io_ledr_o_exp[8] = data_io_ledr_o_expected_prev[8];
	end
	if (
		( data_io_ledr_o_expected_prev[9] !== 1'bx ) && ( data_io_ledr_o_prev[9] !== data_io_ledr_o_expected_prev[9] )
		&& ((data_io_ledr_o_expected_prev[9] !== last_data_io_ledr_o_exp[9]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_io_ledr_o[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_io_ledr_o_expected_prev);
		$display ("     Real value = %b", data_io_ledr_o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_data_io_ledr_o_exp[9] = data_io_ledr_o_expected_prev[9];
	end
	if (
		( data_io_ledr_o_expected_prev[10] !== 1'bx ) && ( data_io_ledr_o_prev[10] !== data_io_ledr_o_expected_prev[10] )
		&& ((data_io_ledr_o_expected_prev[10] !== last_data_io_ledr_o_exp[10]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_io_ledr_o[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_io_ledr_o_expected_prev);
		$display ("     Real value = %b", data_io_ledr_o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_data_io_ledr_o_exp[10] = data_io_ledr_o_expected_prev[10];
	end
	if (
		( data_io_ledr_o_expected_prev[11] !== 1'bx ) && ( data_io_ledr_o_prev[11] !== data_io_ledr_o_expected_prev[11] )
		&& ((data_io_ledr_o_expected_prev[11] !== last_data_io_ledr_o_exp[11]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_io_ledr_o[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_io_ledr_o_expected_prev);
		$display ("     Real value = %b", data_io_ledr_o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_data_io_ledr_o_exp[11] = data_io_ledr_o_expected_prev[11];
	end
	if (
		( data_io_ledr_o_expected_prev[12] !== 1'bx ) && ( data_io_ledr_o_prev[12] !== data_io_ledr_o_expected_prev[12] )
		&& ((data_io_ledr_o_expected_prev[12] !== last_data_io_ledr_o_exp[12]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_io_ledr_o[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_io_ledr_o_expected_prev);
		$display ("     Real value = %b", data_io_ledr_o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_data_io_ledr_o_exp[12] = data_io_ledr_o_expected_prev[12];
	end
	if (
		( data_io_ledr_o_expected_prev[13] !== 1'bx ) && ( data_io_ledr_o_prev[13] !== data_io_ledr_o_expected_prev[13] )
		&& ((data_io_ledr_o_expected_prev[13] !== last_data_io_ledr_o_exp[13]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_io_ledr_o[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_io_ledr_o_expected_prev);
		$display ("     Real value = %b", data_io_ledr_o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_data_io_ledr_o_exp[13] = data_io_ledr_o_expected_prev[13];
	end
	if (
		( data_io_ledr_o_expected_prev[14] !== 1'bx ) && ( data_io_ledr_o_prev[14] !== data_io_ledr_o_expected_prev[14] )
		&& ((data_io_ledr_o_expected_prev[14] !== last_data_io_ledr_o_exp[14]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_io_ledr_o[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_io_ledr_o_expected_prev);
		$display ("     Real value = %b", data_io_ledr_o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_data_io_ledr_o_exp[14] = data_io_ledr_o_expected_prev[14];
	end
	if (
		( data_io_ledr_o_expected_prev[15] !== 1'bx ) && ( data_io_ledr_o_prev[15] !== data_io_ledr_o_expected_prev[15] )
		&& ((data_io_ledr_o_expected_prev[15] !== last_data_io_ledr_o_exp[15]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_io_ledr_o[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_io_ledr_o_expected_prev);
		$display ("     Real value = %b", data_io_ledr_o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_data_io_ledr_o_exp[15] = data_io_ledr_o_expected_prev[15];
	end
	if (
		( data_io_ledr_o_expected_prev[16] !== 1'bx ) && ( data_io_ledr_o_prev[16] !== data_io_ledr_o_expected_prev[16] )
		&& ((data_io_ledr_o_expected_prev[16] !== last_data_io_ledr_o_exp[16]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_io_ledr_o[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_io_ledr_o_expected_prev);
		$display ("     Real value = %b", data_io_ledr_o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_data_io_ledr_o_exp[16] = data_io_ledr_o_expected_prev[16];
	end
	if (
		( data_io_ledr_o_expected_prev[17] !== 1'bx ) && ( data_io_ledr_o_prev[17] !== data_io_ledr_o_expected_prev[17] )
		&& ((data_io_ledr_o_expected_prev[17] !== last_data_io_ledr_o_exp[17]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_io_ledr_o[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_io_ledr_o_expected_prev);
		$display ("     Real value = %b", data_io_ledr_o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_data_io_ledr_o_exp[17] = data_io_ledr_o_expected_prev[17];
	end
	if (
		( data_io_ledr_o_expected_prev[18] !== 1'bx ) && ( data_io_ledr_o_prev[18] !== data_io_ledr_o_expected_prev[18] )
		&& ((data_io_ledr_o_expected_prev[18] !== last_data_io_ledr_o_exp[18]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_io_ledr_o[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_io_ledr_o_expected_prev);
		$display ("     Real value = %b", data_io_ledr_o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_data_io_ledr_o_exp[18] = data_io_ledr_o_expected_prev[18];
	end
	if (
		( data_io_ledr_o_expected_prev[19] !== 1'bx ) && ( data_io_ledr_o_prev[19] !== data_io_ledr_o_expected_prev[19] )
		&& ((data_io_ledr_o_expected_prev[19] !== last_data_io_ledr_o_exp[19]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_io_ledr_o[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_io_ledr_o_expected_prev);
		$display ("     Real value = %b", data_io_ledr_o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_data_io_ledr_o_exp[19] = data_io_ledr_o_expected_prev[19];
	end
	if (
		( data_io_ledr_o_expected_prev[20] !== 1'bx ) && ( data_io_ledr_o_prev[20] !== data_io_ledr_o_expected_prev[20] )
		&& ((data_io_ledr_o_expected_prev[20] !== last_data_io_ledr_o_exp[20]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_io_ledr_o[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_io_ledr_o_expected_prev);
		$display ("     Real value = %b", data_io_ledr_o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_data_io_ledr_o_exp[20] = data_io_ledr_o_expected_prev[20];
	end
	if (
		( data_io_ledr_o_expected_prev[21] !== 1'bx ) && ( data_io_ledr_o_prev[21] !== data_io_ledr_o_expected_prev[21] )
		&& ((data_io_ledr_o_expected_prev[21] !== last_data_io_ledr_o_exp[21]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_io_ledr_o[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_io_ledr_o_expected_prev);
		$display ("     Real value = %b", data_io_ledr_o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_data_io_ledr_o_exp[21] = data_io_ledr_o_expected_prev[21];
	end
	if (
		( data_io_ledr_o_expected_prev[22] !== 1'bx ) && ( data_io_ledr_o_prev[22] !== data_io_ledr_o_expected_prev[22] )
		&& ((data_io_ledr_o_expected_prev[22] !== last_data_io_ledr_o_exp[22]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_io_ledr_o[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_io_ledr_o_expected_prev);
		$display ("     Real value = %b", data_io_ledr_o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_data_io_ledr_o_exp[22] = data_io_ledr_o_expected_prev[22];
	end
	if (
		( data_io_ledr_o_expected_prev[23] !== 1'bx ) && ( data_io_ledr_o_prev[23] !== data_io_ledr_o_expected_prev[23] )
		&& ((data_io_ledr_o_expected_prev[23] !== last_data_io_ledr_o_exp[23]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_io_ledr_o[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_io_ledr_o_expected_prev);
		$display ("     Real value = %b", data_io_ledr_o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_data_io_ledr_o_exp[23] = data_io_ledr_o_expected_prev[23];
	end
	if (
		( data_io_ledr_o_expected_prev[24] !== 1'bx ) && ( data_io_ledr_o_prev[24] !== data_io_ledr_o_expected_prev[24] )
		&& ((data_io_ledr_o_expected_prev[24] !== last_data_io_ledr_o_exp[24]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_io_ledr_o[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_io_ledr_o_expected_prev);
		$display ("     Real value = %b", data_io_ledr_o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_data_io_ledr_o_exp[24] = data_io_ledr_o_expected_prev[24];
	end
	if (
		( data_io_ledr_o_expected_prev[25] !== 1'bx ) && ( data_io_ledr_o_prev[25] !== data_io_ledr_o_expected_prev[25] )
		&& ((data_io_ledr_o_expected_prev[25] !== last_data_io_ledr_o_exp[25]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_io_ledr_o[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_io_ledr_o_expected_prev);
		$display ("     Real value = %b", data_io_ledr_o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_data_io_ledr_o_exp[25] = data_io_ledr_o_expected_prev[25];
	end
	if (
		( data_io_ledr_o_expected_prev[26] !== 1'bx ) && ( data_io_ledr_o_prev[26] !== data_io_ledr_o_expected_prev[26] )
		&& ((data_io_ledr_o_expected_prev[26] !== last_data_io_ledr_o_exp[26]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_io_ledr_o[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_io_ledr_o_expected_prev);
		$display ("     Real value = %b", data_io_ledr_o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_data_io_ledr_o_exp[26] = data_io_ledr_o_expected_prev[26];
	end
	if (
		( data_io_ledr_o_expected_prev[27] !== 1'bx ) && ( data_io_ledr_o_prev[27] !== data_io_ledr_o_expected_prev[27] )
		&& ((data_io_ledr_o_expected_prev[27] !== last_data_io_ledr_o_exp[27]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_io_ledr_o[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_io_ledr_o_expected_prev);
		$display ("     Real value = %b", data_io_ledr_o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_data_io_ledr_o_exp[27] = data_io_ledr_o_expected_prev[27];
	end
	if (
		( data_io_ledr_o_expected_prev[28] !== 1'bx ) && ( data_io_ledr_o_prev[28] !== data_io_ledr_o_expected_prev[28] )
		&& ((data_io_ledr_o_expected_prev[28] !== last_data_io_ledr_o_exp[28]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_io_ledr_o[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_io_ledr_o_expected_prev);
		$display ("     Real value = %b", data_io_ledr_o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_data_io_ledr_o_exp[28] = data_io_ledr_o_expected_prev[28];
	end
	if (
		( data_io_ledr_o_expected_prev[29] !== 1'bx ) && ( data_io_ledr_o_prev[29] !== data_io_ledr_o_expected_prev[29] )
		&& ((data_io_ledr_o_expected_prev[29] !== last_data_io_ledr_o_exp[29]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_io_ledr_o[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_io_ledr_o_expected_prev);
		$display ("     Real value = %b", data_io_ledr_o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_data_io_ledr_o_exp[29] = data_io_ledr_o_expected_prev[29];
	end
	if (
		( data_io_ledr_o_expected_prev[30] !== 1'bx ) && ( data_io_ledr_o_prev[30] !== data_io_ledr_o_expected_prev[30] )
		&& ((data_io_ledr_o_expected_prev[30] !== last_data_io_ledr_o_exp[30]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_io_ledr_o[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_io_ledr_o_expected_prev);
		$display ("     Real value = %b", data_io_ledr_o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_data_io_ledr_o_exp[30] = data_io_ledr_o_expected_prev[30];
	end
	if (
		( data_io_ledr_o_expected_prev[31] !== 1'bx ) && ( data_io_ledr_o_prev[31] !== data_io_ledr_o_expected_prev[31] )
		&& ((data_io_ledr_o_expected_prev[31] !== last_data_io_ledr_o_exp[31]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_io_ledr_o[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_io_ledr_o_expected_prev);
		$display ("     Real value = %b", data_io_ledr_o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_data_io_ledr_o_exp[31] = data_io_ledr_o_expected_prev[31];
	end
	if (
		( data_out_expected_prev[0] !== 1'bx ) && ( data_out_prev[0] !== data_out_expected_prev[0] )
		&& ((data_out_expected_prev[0] !== last_data_out_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_data_out_exp[0] = data_out_expected_prev[0];
	end
	if (
		( data_out_expected_prev[1] !== 1'bx ) && ( data_out_prev[1] !== data_out_expected_prev[1] )
		&& ((data_out_expected_prev[1] !== last_data_out_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_data_out_exp[1] = data_out_expected_prev[1];
	end
	if (
		( data_out_expected_prev[2] !== 1'bx ) && ( data_out_prev[2] !== data_out_expected_prev[2] )
		&& ((data_out_expected_prev[2] !== last_data_out_exp[2]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_data_out_exp[2] = data_out_expected_prev[2];
	end
	if (
		( data_out_expected_prev[3] !== 1'bx ) && ( data_out_prev[3] !== data_out_expected_prev[3] )
		&& ((data_out_expected_prev[3] !== last_data_out_exp[3]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_data_out_exp[3] = data_out_expected_prev[3];
	end
	if (
		( data_out_expected_prev[4] !== 1'bx ) && ( data_out_prev[4] !== data_out_expected_prev[4] )
		&& ((data_out_expected_prev[4] !== last_data_out_exp[4]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_data_out_exp[4] = data_out_expected_prev[4];
	end
	if (
		( data_out_expected_prev[5] !== 1'bx ) && ( data_out_prev[5] !== data_out_expected_prev[5] )
		&& ((data_out_expected_prev[5] !== last_data_out_exp[5]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_data_out_exp[5] = data_out_expected_prev[5];
	end
	if (
		( data_out_expected_prev[6] !== 1'bx ) && ( data_out_prev[6] !== data_out_expected_prev[6] )
		&& ((data_out_expected_prev[6] !== last_data_out_exp[6]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_data_out_exp[6] = data_out_expected_prev[6];
	end
	if (
		( data_out_expected_prev[7] !== 1'bx ) && ( data_out_prev[7] !== data_out_expected_prev[7] )
		&& ((data_out_expected_prev[7] !== last_data_out_exp[7]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_data_out_exp[7] = data_out_expected_prev[7];
	end
	if (
		( data_out_expected_prev[8] !== 1'bx ) && ( data_out_prev[8] !== data_out_expected_prev[8] )
		&& ((data_out_expected_prev[8] !== last_data_out_exp[8]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_data_out_exp[8] = data_out_expected_prev[8];
	end
	if (
		( data_out_expected_prev[9] !== 1'bx ) && ( data_out_prev[9] !== data_out_expected_prev[9] )
		&& ((data_out_expected_prev[9] !== last_data_out_exp[9]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_data_out_exp[9] = data_out_expected_prev[9];
	end
	if (
		( data_out_expected_prev[10] !== 1'bx ) && ( data_out_prev[10] !== data_out_expected_prev[10] )
		&& ((data_out_expected_prev[10] !== last_data_out_exp[10]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_data_out_exp[10] = data_out_expected_prev[10];
	end
	if (
		( data_out_expected_prev[11] !== 1'bx ) && ( data_out_prev[11] !== data_out_expected_prev[11] )
		&& ((data_out_expected_prev[11] !== last_data_out_exp[11]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_data_out_exp[11] = data_out_expected_prev[11];
	end
	if (
		( data_out_expected_prev[12] !== 1'bx ) && ( data_out_prev[12] !== data_out_expected_prev[12] )
		&& ((data_out_expected_prev[12] !== last_data_out_exp[12]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_data_out_exp[12] = data_out_expected_prev[12];
	end
	if (
		( data_out_expected_prev[13] !== 1'bx ) && ( data_out_prev[13] !== data_out_expected_prev[13] )
		&& ((data_out_expected_prev[13] !== last_data_out_exp[13]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_data_out_exp[13] = data_out_expected_prev[13];
	end
	if (
		( data_out_expected_prev[14] !== 1'bx ) && ( data_out_prev[14] !== data_out_expected_prev[14] )
		&& ((data_out_expected_prev[14] !== last_data_out_exp[14]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_data_out_exp[14] = data_out_expected_prev[14];
	end
	if (
		( data_out_expected_prev[15] !== 1'bx ) && ( data_out_prev[15] !== data_out_expected_prev[15] )
		&& ((data_out_expected_prev[15] !== last_data_out_exp[15]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_data_out_exp[15] = data_out_expected_prev[15];
	end
	if (
		( data_out_expected_prev[16] !== 1'bx ) && ( data_out_prev[16] !== data_out_expected_prev[16] )
		&& ((data_out_expected_prev[16] !== last_data_out_exp[16]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_data_out_exp[16] = data_out_expected_prev[16];
	end
	if (
		( data_out_expected_prev[17] !== 1'bx ) && ( data_out_prev[17] !== data_out_expected_prev[17] )
		&& ((data_out_expected_prev[17] !== last_data_out_exp[17]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_data_out_exp[17] = data_out_expected_prev[17];
	end
	if (
		( data_out_expected_prev[18] !== 1'bx ) && ( data_out_prev[18] !== data_out_expected_prev[18] )
		&& ((data_out_expected_prev[18] !== last_data_out_exp[18]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_data_out_exp[18] = data_out_expected_prev[18];
	end
	if (
		( data_out_expected_prev[19] !== 1'bx ) && ( data_out_prev[19] !== data_out_expected_prev[19] )
		&& ((data_out_expected_prev[19] !== last_data_out_exp[19]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_data_out_exp[19] = data_out_expected_prev[19];
	end
	if (
		( data_out_expected_prev[20] !== 1'bx ) && ( data_out_prev[20] !== data_out_expected_prev[20] )
		&& ((data_out_expected_prev[20] !== last_data_out_exp[20]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_data_out_exp[20] = data_out_expected_prev[20];
	end
	if (
		( data_out_expected_prev[21] !== 1'bx ) && ( data_out_prev[21] !== data_out_expected_prev[21] )
		&& ((data_out_expected_prev[21] !== last_data_out_exp[21]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_data_out_exp[21] = data_out_expected_prev[21];
	end
	if (
		( data_out_expected_prev[22] !== 1'bx ) && ( data_out_prev[22] !== data_out_expected_prev[22] )
		&& ((data_out_expected_prev[22] !== last_data_out_exp[22]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_data_out_exp[22] = data_out_expected_prev[22];
	end
	if (
		( data_out_expected_prev[23] !== 1'bx ) && ( data_out_prev[23] !== data_out_expected_prev[23] )
		&& ((data_out_expected_prev[23] !== last_data_out_exp[23]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_data_out_exp[23] = data_out_expected_prev[23];
	end
	if (
		( data_out_expected_prev[24] !== 1'bx ) && ( data_out_prev[24] !== data_out_expected_prev[24] )
		&& ((data_out_expected_prev[24] !== last_data_out_exp[24]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_data_out_exp[24] = data_out_expected_prev[24];
	end
	if (
		( data_out_expected_prev[25] !== 1'bx ) && ( data_out_prev[25] !== data_out_expected_prev[25] )
		&& ((data_out_expected_prev[25] !== last_data_out_exp[25]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_data_out_exp[25] = data_out_expected_prev[25];
	end
	if (
		( data_out_expected_prev[26] !== 1'bx ) && ( data_out_prev[26] !== data_out_expected_prev[26] )
		&& ((data_out_expected_prev[26] !== last_data_out_exp[26]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_data_out_exp[26] = data_out_expected_prev[26];
	end
	if (
		( data_out_expected_prev[27] !== 1'bx ) && ( data_out_prev[27] !== data_out_expected_prev[27] )
		&& ((data_out_expected_prev[27] !== last_data_out_exp[27]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_data_out_exp[27] = data_out_expected_prev[27];
	end
	if (
		( data_out_expected_prev[28] !== 1'bx ) && ( data_out_prev[28] !== data_out_expected_prev[28] )
		&& ((data_out_expected_prev[28] !== last_data_out_exp[28]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_data_out_exp[28] = data_out_expected_prev[28];
	end
	if (
		( data_out_expected_prev[29] !== 1'bx ) && ( data_out_prev[29] !== data_out_expected_prev[29] )
		&& ((data_out_expected_prev[29] !== last_data_out_exp[29]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_data_out_exp[29] = data_out_expected_prev[29];
	end
	if (
		( data_out_expected_prev[30] !== 1'bx ) && ( data_out_prev[30] !== data_out_expected_prev[30] )
		&& ((data_out_expected_prev[30] !== last_data_out_exp[30]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_data_out_exp[30] = data_out_expected_prev[30];
	end
	if (
		( data_out_expected_prev[31] !== 1'bx ) && ( data_out_prev[31] !== data_out_expected_prev[31] )
		&& ((data_out_expected_prev[31] !== last_data_out_exp[31]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_data_out_exp[31] = data_out_expected_prev[31];
	end
	if (
		( data_trans_expected_prev[0] !== 1'bx ) && ( data_trans_prev[0] !== data_trans_expected_prev[0] )
		&& ((data_trans_expected_prev[0] !== last_data_trans_exp[0]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_trans[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_trans_expected_prev);
		$display ("     Real value = %b", data_trans_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_data_trans_exp[0] = data_trans_expected_prev[0];
	end
	if (
		( data_trans_expected_prev[1] !== 1'bx ) && ( data_trans_prev[1] !== data_trans_expected_prev[1] )
		&& ((data_trans_expected_prev[1] !== last_data_trans_exp[1]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_trans[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_trans_expected_prev);
		$display ("     Real value = %b", data_trans_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_data_trans_exp[1] = data_trans_expected_prev[1];
	end
	if (
		( data_trans_expected_prev[2] !== 1'bx ) && ( data_trans_prev[2] !== data_trans_expected_prev[2] )
		&& ((data_trans_expected_prev[2] !== last_data_trans_exp[2]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_trans[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_trans_expected_prev);
		$display ("     Real value = %b", data_trans_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_data_trans_exp[2] = data_trans_expected_prev[2];
	end
	if (
		( data_trans_expected_prev[3] !== 1'bx ) && ( data_trans_prev[3] !== data_trans_expected_prev[3] )
		&& ((data_trans_expected_prev[3] !== last_data_trans_exp[3]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_trans[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_trans_expected_prev);
		$display ("     Real value = %b", data_trans_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_data_trans_exp[3] = data_trans_expected_prev[3];
	end
	if (
		( data_trans_expected_prev[4] !== 1'bx ) && ( data_trans_prev[4] !== data_trans_expected_prev[4] )
		&& ((data_trans_expected_prev[4] !== last_data_trans_exp[4]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_trans[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_trans_expected_prev);
		$display ("     Real value = %b", data_trans_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_data_trans_exp[4] = data_trans_expected_prev[4];
	end
	if (
		( data_trans_expected_prev[5] !== 1'bx ) && ( data_trans_prev[5] !== data_trans_expected_prev[5] )
		&& ((data_trans_expected_prev[5] !== last_data_trans_exp[5]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_trans[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_trans_expected_prev);
		$display ("     Real value = %b", data_trans_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_data_trans_exp[5] = data_trans_expected_prev[5];
	end
	if (
		( data_trans_expected_prev[6] !== 1'bx ) && ( data_trans_prev[6] !== data_trans_expected_prev[6] )
		&& ((data_trans_expected_prev[6] !== last_data_trans_exp[6]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_trans[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_trans_expected_prev);
		$display ("     Real value = %b", data_trans_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_data_trans_exp[6] = data_trans_expected_prev[6];
	end
	if (
		( data_trans_expected_prev[7] !== 1'bx ) && ( data_trans_prev[7] !== data_trans_expected_prev[7] )
		&& ((data_trans_expected_prev[7] !== last_data_trans_exp[7]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_trans[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_trans_expected_prev);
		$display ("     Real value = %b", data_trans_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_data_trans_exp[7] = data_trans_expected_prev[7];
	end
	if (
		( data_trans_expected_prev[8] !== 1'bx ) && ( data_trans_prev[8] !== data_trans_expected_prev[8] )
		&& ((data_trans_expected_prev[8] !== last_data_trans_exp[8]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_trans[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_trans_expected_prev);
		$display ("     Real value = %b", data_trans_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_data_trans_exp[8] = data_trans_expected_prev[8];
	end
	if (
		( data_trans_expected_prev[9] !== 1'bx ) && ( data_trans_prev[9] !== data_trans_expected_prev[9] )
		&& ((data_trans_expected_prev[9] !== last_data_trans_exp[9]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_trans[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_trans_expected_prev);
		$display ("     Real value = %b", data_trans_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_data_trans_exp[9] = data_trans_expected_prev[9];
	end
	if (
		( data_trans_expected_prev[10] !== 1'bx ) && ( data_trans_prev[10] !== data_trans_expected_prev[10] )
		&& ((data_trans_expected_prev[10] !== last_data_trans_exp[10]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_trans[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_trans_expected_prev);
		$display ("     Real value = %b", data_trans_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_data_trans_exp[10] = data_trans_expected_prev[10];
	end
	if (
		( data_trans_expected_prev[11] !== 1'bx ) && ( data_trans_prev[11] !== data_trans_expected_prev[11] )
		&& ((data_trans_expected_prev[11] !== last_data_trans_exp[11]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_trans[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_trans_expected_prev);
		$display ("     Real value = %b", data_trans_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_data_trans_exp[11] = data_trans_expected_prev[11];
	end
	if (
		( pc_debug_o_expected_prev[0] !== 1'bx ) && ( pc_debug_o_prev[0] !== pc_debug_o_expected_prev[0] )
		&& ((pc_debug_o_expected_prev[0] !== last_pc_debug_o_exp[0]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc_debug_o[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_debug_o_expected_prev);
		$display ("     Real value = %b", pc_debug_o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_pc_debug_o_exp[0] = pc_debug_o_expected_prev[0];
	end
	if (
		( pc_debug_o_expected_prev[1] !== 1'bx ) && ( pc_debug_o_prev[1] !== pc_debug_o_expected_prev[1] )
		&& ((pc_debug_o_expected_prev[1] !== last_pc_debug_o_exp[1]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc_debug_o[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_debug_o_expected_prev);
		$display ("     Real value = %b", pc_debug_o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_pc_debug_o_exp[1] = pc_debug_o_expected_prev[1];
	end
	if (
		( pc_debug_o_expected_prev[2] !== 1'bx ) && ( pc_debug_o_prev[2] !== pc_debug_o_expected_prev[2] )
		&& ((pc_debug_o_expected_prev[2] !== last_pc_debug_o_exp[2]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc_debug_o[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_debug_o_expected_prev);
		$display ("     Real value = %b", pc_debug_o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_pc_debug_o_exp[2] = pc_debug_o_expected_prev[2];
	end
	if (
		( pc_debug_o_expected_prev[3] !== 1'bx ) && ( pc_debug_o_prev[3] !== pc_debug_o_expected_prev[3] )
		&& ((pc_debug_o_expected_prev[3] !== last_pc_debug_o_exp[3]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc_debug_o[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_debug_o_expected_prev);
		$display ("     Real value = %b", pc_debug_o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_pc_debug_o_exp[3] = pc_debug_o_expected_prev[3];
	end
	if (
		( pc_debug_o_expected_prev[4] !== 1'bx ) && ( pc_debug_o_prev[4] !== pc_debug_o_expected_prev[4] )
		&& ((pc_debug_o_expected_prev[4] !== last_pc_debug_o_exp[4]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc_debug_o[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_debug_o_expected_prev);
		$display ("     Real value = %b", pc_debug_o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_pc_debug_o_exp[4] = pc_debug_o_expected_prev[4];
	end
	if (
		( pc_debug_o_expected_prev[5] !== 1'bx ) && ( pc_debug_o_prev[5] !== pc_debug_o_expected_prev[5] )
		&& ((pc_debug_o_expected_prev[5] !== last_pc_debug_o_exp[5]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc_debug_o[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_debug_o_expected_prev);
		$display ("     Real value = %b", pc_debug_o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_pc_debug_o_exp[5] = pc_debug_o_expected_prev[5];
	end
	if (
		( pc_debug_o_expected_prev[6] !== 1'bx ) && ( pc_debug_o_prev[6] !== pc_debug_o_expected_prev[6] )
		&& ((pc_debug_o_expected_prev[6] !== last_pc_debug_o_exp[6]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc_debug_o[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_debug_o_expected_prev);
		$display ("     Real value = %b", pc_debug_o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_pc_debug_o_exp[6] = pc_debug_o_expected_prev[6];
	end
	if (
		( pc_debug_o_expected_prev[7] !== 1'bx ) && ( pc_debug_o_prev[7] !== pc_debug_o_expected_prev[7] )
		&& ((pc_debug_o_expected_prev[7] !== last_pc_debug_o_exp[7]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc_debug_o[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_debug_o_expected_prev);
		$display ("     Real value = %b", pc_debug_o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_pc_debug_o_exp[7] = pc_debug_o_expected_prev[7];
	end
	if (
		( pc_debug_o_expected_prev[8] !== 1'bx ) && ( pc_debug_o_prev[8] !== pc_debug_o_expected_prev[8] )
		&& ((pc_debug_o_expected_prev[8] !== last_pc_debug_o_exp[8]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc_debug_o[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_debug_o_expected_prev);
		$display ("     Real value = %b", pc_debug_o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_pc_debug_o_exp[8] = pc_debug_o_expected_prev[8];
	end
	if (
		( pc_debug_o_expected_prev[9] !== 1'bx ) && ( pc_debug_o_prev[9] !== pc_debug_o_expected_prev[9] )
		&& ((pc_debug_o_expected_prev[9] !== last_pc_debug_o_exp[9]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc_debug_o[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_debug_o_expected_prev);
		$display ("     Real value = %b", pc_debug_o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_pc_debug_o_exp[9] = pc_debug_o_expected_prev[9];
	end
	if (
		( pc_debug_o_expected_prev[10] !== 1'bx ) && ( pc_debug_o_prev[10] !== pc_debug_o_expected_prev[10] )
		&& ((pc_debug_o_expected_prev[10] !== last_pc_debug_o_exp[10]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc_debug_o[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_debug_o_expected_prev);
		$display ("     Real value = %b", pc_debug_o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_pc_debug_o_exp[10] = pc_debug_o_expected_prev[10];
	end
	if (
		( pc_debug_o_expected_prev[11] !== 1'bx ) && ( pc_debug_o_prev[11] !== pc_debug_o_expected_prev[11] )
		&& ((pc_debug_o_expected_prev[11] !== last_pc_debug_o_exp[11]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc_debug_o[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_debug_o_expected_prev);
		$display ("     Real value = %b", pc_debug_o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_pc_debug_o_exp[11] = pc_debug_o_expected_prev[11];
	end
	if (
		( pc_debug_o_expected_prev[12] !== 1'bx ) && ( pc_debug_o_prev[12] !== pc_debug_o_expected_prev[12] )
		&& ((pc_debug_o_expected_prev[12] !== last_pc_debug_o_exp[12]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc_debug_o[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_debug_o_expected_prev);
		$display ("     Real value = %b", pc_debug_o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_pc_debug_o_exp[12] = pc_debug_o_expected_prev[12];
	end
	if (
		( pc_debug_o_expected_prev[13] !== 1'bx ) && ( pc_debug_o_prev[13] !== pc_debug_o_expected_prev[13] )
		&& ((pc_debug_o_expected_prev[13] !== last_pc_debug_o_exp[13]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc_debug_o[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_debug_o_expected_prev);
		$display ("     Real value = %b", pc_debug_o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_pc_debug_o_exp[13] = pc_debug_o_expected_prev[13];
	end
	if (
		( pc_debug_o_expected_prev[14] !== 1'bx ) && ( pc_debug_o_prev[14] !== pc_debug_o_expected_prev[14] )
		&& ((pc_debug_o_expected_prev[14] !== last_pc_debug_o_exp[14]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc_debug_o[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_debug_o_expected_prev);
		$display ("     Real value = %b", pc_debug_o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_pc_debug_o_exp[14] = pc_debug_o_expected_prev[14];
	end
	if (
		( pc_debug_o_expected_prev[15] !== 1'bx ) && ( pc_debug_o_prev[15] !== pc_debug_o_expected_prev[15] )
		&& ((pc_debug_o_expected_prev[15] !== last_pc_debug_o_exp[15]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc_debug_o[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_debug_o_expected_prev);
		$display ("     Real value = %b", pc_debug_o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_pc_debug_o_exp[15] = pc_debug_o_expected_prev[15];
	end
	if (
		( pc_debug_o_expected_prev[16] !== 1'bx ) && ( pc_debug_o_prev[16] !== pc_debug_o_expected_prev[16] )
		&& ((pc_debug_o_expected_prev[16] !== last_pc_debug_o_exp[16]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc_debug_o[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_debug_o_expected_prev);
		$display ("     Real value = %b", pc_debug_o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_pc_debug_o_exp[16] = pc_debug_o_expected_prev[16];
	end
	if (
		( pc_debug_o_expected_prev[17] !== 1'bx ) && ( pc_debug_o_prev[17] !== pc_debug_o_expected_prev[17] )
		&& ((pc_debug_o_expected_prev[17] !== last_pc_debug_o_exp[17]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc_debug_o[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_debug_o_expected_prev);
		$display ("     Real value = %b", pc_debug_o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_pc_debug_o_exp[17] = pc_debug_o_expected_prev[17];
	end
	if (
		( pc_debug_o_expected_prev[18] !== 1'bx ) && ( pc_debug_o_prev[18] !== pc_debug_o_expected_prev[18] )
		&& ((pc_debug_o_expected_prev[18] !== last_pc_debug_o_exp[18]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc_debug_o[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_debug_o_expected_prev);
		$display ("     Real value = %b", pc_debug_o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_pc_debug_o_exp[18] = pc_debug_o_expected_prev[18];
	end
	if (
		( pc_debug_o_expected_prev[19] !== 1'bx ) && ( pc_debug_o_prev[19] !== pc_debug_o_expected_prev[19] )
		&& ((pc_debug_o_expected_prev[19] !== last_pc_debug_o_exp[19]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc_debug_o[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_debug_o_expected_prev);
		$display ("     Real value = %b", pc_debug_o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_pc_debug_o_exp[19] = pc_debug_o_expected_prev[19];
	end
	if (
		( pc_debug_o_expected_prev[20] !== 1'bx ) && ( pc_debug_o_prev[20] !== pc_debug_o_expected_prev[20] )
		&& ((pc_debug_o_expected_prev[20] !== last_pc_debug_o_exp[20]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc_debug_o[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_debug_o_expected_prev);
		$display ("     Real value = %b", pc_debug_o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_pc_debug_o_exp[20] = pc_debug_o_expected_prev[20];
	end
	if (
		( pc_debug_o_expected_prev[21] !== 1'bx ) && ( pc_debug_o_prev[21] !== pc_debug_o_expected_prev[21] )
		&& ((pc_debug_o_expected_prev[21] !== last_pc_debug_o_exp[21]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc_debug_o[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_debug_o_expected_prev);
		$display ("     Real value = %b", pc_debug_o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_pc_debug_o_exp[21] = pc_debug_o_expected_prev[21];
	end
	if (
		( pc_debug_o_expected_prev[22] !== 1'bx ) && ( pc_debug_o_prev[22] !== pc_debug_o_expected_prev[22] )
		&& ((pc_debug_o_expected_prev[22] !== last_pc_debug_o_exp[22]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc_debug_o[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_debug_o_expected_prev);
		$display ("     Real value = %b", pc_debug_o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_pc_debug_o_exp[22] = pc_debug_o_expected_prev[22];
	end
	if (
		( pc_debug_o_expected_prev[23] !== 1'bx ) && ( pc_debug_o_prev[23] !== pc_debug_o_expected_prev[23] )
		&& ((pc_debug_o_expected_prev[23] !== last_pc_debug_o_exp[23]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc_debug_o[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_debug_o_expected_prev);
		$display ("     Real value = %b", pc_debug_o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_pc_debug_o_exp[23] = pc_debug_o_expected_prev[23];
	end
	if (
		( pc_debug_o_expected_prev[24] !== 1'bx ) && ( pc_debug_o_prev[24] !== pc_debug_o_expected_prev[24] )
		&& ((pc_debug_o_expected_prev[24] !== last_pc_debug_o_exp[24]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc_debug_o[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_debug_o_expected_prev);
		$display ("     Real value = %b", pc_debug_o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_pc_debug_o_exp[24] = pc_debug_o_expected_prev[24];
	end
	if (
		( pc_debug_o_expected_prev[25] !== 1'bx ) && ( pc_debug_o_prev[25] !== pc_debug_o_expected_prev[25] )
		&& ((pc_debug_o_expected_prev[25] !== last_pc_debug_o_exp[25]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc_debug_o[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_debug_o_expected_prev);
		$display ("     Real value = %b", pc_debug_o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_pc_debug_o_exp[25] = pc_debug_o_expected_prev[25];
	end
	if (
		( pc_debug_o_expected_prev[26] !== 1'bx ) && ( pc_debug_o_prev[26] !== pc_debug_o_expected_prev[26] )
		&& ((pc_debug_o_expected_prev[26] !== last_pc_debug_o_exp[26]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc_debug_o[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_debug_o_expected_prev);
		$display ("     Real value = %b", pc_debug_o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_pc_debug_o_exp[26] = pc_debug_o_expected_prev[26];
	end
	if (
		( pc_debug_o_expected_prev[27] !== 1'bx ) && ( pc_debug_o_prev[27] !== pc_debug_o_expected_prev[27] )
		&& ((pc_debug_o_expected_prev[27] !== last_pc_debug_o_exp[27]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc_debug_o[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_debug_o_expected_prev);
		$display ("     Real value = %b", pc_debug_o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_pc_debug_o_exp[27] = pc_debug_o_expected_prev[27];
	end
	if (
		( pc_debug_o_expected_prev[28] !== 1'bx ) && ( pc_debug_o_prev[28] !== pc_debug_o_expected_prev[28] )
		&& ((pc_debug_o_expected_prev[28] !== last_pc_debug_o_exp[28]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc_debug_o[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_debug_o_expected_prev);
		$display ("     Real value = %b", pc_debug_o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_pc_debug_o_exp[28] = pc_debug_o_expected_prev[28];
	end
	if (
		( pc_debug_o_expected_prev[29] !== 1'bx ) && ( pc_debug_o_prev[29] !== pc_debug_o_expected_prev[29] )
		&& ((pc_debug_o_expected_prev[29] !== last_pc_debug_o_exp[29]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc_debug_o[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_debug_o_expected_prev);
		$display ("     Real value = %b", pc_debug_o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_pc_debug_o_exp[29] = pc_debug_o_expected_prev[29];
	end
	if (
		( pc_debug_o_expected_prev[30] !== 1'bx ) && ( pc_debug_o_prev[30] !== pc_debug_o_expected_prev[30] )
		&& ((pc_debug_o_expected_prev[30] !== last_pc_debug_o_exp[30]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc_debug_o[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_debug_o_expected_prev);
		$display ("     Real value = %b", pc_debug_o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_pc_debug_o_exp[30] = pc_debug_o_expected_prev[30];
	end
	if (
		( pc_debug_o_expected_prev[31] !== 1'bx ) && ( pc_debug_o_prev[31] !== pc_debug_o_expected_prev[31] )
		&& ((pc_debug_o_expected_prev[31] !== last_pc_debug_o_exp[31]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc_debug_o[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_debug_o_expected_prev);
		$display ("     Real value = %b", pc_debug_o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_pc_debug_o_exp[31] = pc_debug_o_expected_prev[31];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#10000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Thesis_Project_vlg_vec_tst();
// constants                                           
// general purpose registers
reg UARTCLK;
reg UART_RXD;
reg clk_i;
reg [9:0] data_input;
reg rst_ni;
// wires                                               
wire [31:0] HADDR;
wire [31:0] HRDATA;
wire UART_TXD;
wire baud_tick;
wire [31:0] data_io_lcd_o;
wire [31:0] data_io_ledr_o;
wire [31:0] data_out;
wire [11:0] data_trans;
wire [31:0] pc_debug_o;

wire sampler;                             

// assign statements (if any)                          
Thesis_Project i1 (
// port map - connection between master ports and signals/registers   
	.HADDR(HADDR),
	.HRDATA(HRDATA),
	.UARTCLK(UARTCLK),
	.UART_RXD(UART_RXD),
	.UART_TXD(UART_TXD),
	.baud_tick(baud_tick),
	.clk_i(clk_i),
	.data_input(data_input),
	.data_io_lcd_o(data_io_lcd_o),
	.data_io_ledr_o(data_io_ledr_o),
	.data_out(data_out),
	.data_trans(data_trans),
	.pc_debug_o(pc_debug_o),
	.rst_ni(rst_ni)
);

// UARTCLK
always
begin
	UARTCLK = 1'b0;
	UARTCLK = #10000 1'b1;
	#10000;
end 

// clk_i
always
begin
	clk_i = 1'b0;
	clk_i = #2500 1'b1;
	#2500;
end 

// rst_ni
initial
begin
	rst_ni = 1'b0;
	rst_ni = #40000 1'b1;
end 
// data_input[ 9 ]
initial
begin
	data_input[9] = 1'b0;
end 
// data_input[ 8 ]
initial
begin
	data_input[8] = 1'b1;
end 
// data_input[ 7 ]
initial
begin
	data_input[7] = 1'b0;
end 
// data_input[ 6 ]
initial
begin
	data_input[6] = 1'b0;
end 
// data_input[ 5 ]
initial
begin
	data_input[5] = 1'b0;
end 
// data_input[ 4 ]
initial
begin
	data_input[4] = 1'b0;
end 
// data_input[ 3 ]
initial
begin
	data_input[3] = 1'b0;
end 
// data_input[ 2 ]
initial
begin
	data_input[2] = 1'b0;
end 
// data_input[ 1 ]
initial
begin
	data_input[1] = 1'b1;
end 
// data_input[ 0 ]
initial
begin
	data_input[0] = 1'b1;
end 

// UART_RXD
initial
begin
	UART_RXD = 1'b1;
	UART_RXD = #1360000 1'b0;
	UART_RXD = #40000 1'b1;
end 

Thesis_Project_vlg_sample_tst tb_sample (
	.UARTCLK(UARTCLK),
	.UART_RXD(UART_RXD),
	.clk_i(clk_i),
	.data_input(data_input),
	.rst_ni(rst_ni),
	.sampler_tx(sampler)
);

Thesis_Project_vlg_check_tst tb_out(
	.HADDR(HADDR),
	.HRDATA(HRDATA),
	.UART_TXD(UART_TXD),
	.baud_tick(baud_tick),
	.data_io_lcd_o(data_io_lcd_o),
	.data_io_ledr_o(data_io_ledr_o),
	.data_out(data_out),
	.data_trans(data_trans),
	.pc_debug_o(pc_debug_o),
	.sampler_rx(sampler)
);
endmodule

