// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/17/2024 16:52:14"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    BAUD_RATE_GENERATOR
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module BAUD_RATE_GENERATOR_vlg_sample_tst(
	baud_div_16,
	cd,
	rst_n,
	uart_mode_sel,
	uart_ref_clk,
	sampler_tx
);
input  baud_div_16;
input [12:0] cd;
input  rst_n;
input  uart_mode_sel;
input  uart_ref_clk;
output sampler_tx;

reg sample;
time current_time;
always @(baud_div_16 or cd or rst_n or uart_mode_sel or uart_ref_clk)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module BAUD_RATE_GENERATOR_vlg_check_tst (
	baud_tick,
	cd_count,
	counter_baud,
	sampler_rx
);
input  baud_tick;
input [12:0] cd_count;
input [12:0] counter_baud;
input sampler_rx;

reg  baud_tick_expected;
reg [12:0] cd_count_expected;
reg [12:0] counter_baud_expected;

reg  baud_tick_prev;
reg [12:0] cd_count_prev;
reg [12:0] counter_baud_prev;

reg  baud_tick_expected_prev;
reg [12:0] cd_count_expected_prev;
reg [12:0] counter_baud_expected_prev;

reg  last_baud_tick_exp;
reg [12:0] last_cd_count_exp;
reg [12:0] last_counter_baud_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:3] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 3'b1;
end

// update real /o prevs

always @(trigger)
begin
	baud_tick_prev = baud_tick;
	cd_count_prev = cd_count;
	counter_baud_prev = counter_baud;
end

// update expected /o prevs

always @(trigger)
begin
	baud_tick_expected_prev = baud_tick_expected;
	cd_count_expected_prev = cd_count_expected;
	counter_baud_expected_prev = counter_baud_expected;
end



// expected baud_tick
initial
begin
	baud_tick_expected = 1'bX;
end 
// expected cd_count[ 12 ]
initial
begin
	cd_count_expected[12] = 1'bX;
end 
// expected cd_count[ 11 ]
initial
begin
	cd_count_expected[11] = 1'bX;
end 
// expected cd_count[ 10 ]
initial
begin
	cd_count_expected[10] = 1'bX;
end 
// expected cd_count[ 9 ]
initial
begin
	cd_count_expected[9] = 1'bX;
end 
// expected cd_count[ 8 ]
initial
begin
	cd_count_expected[8] = 1'bX;
end 
// expected cd_count[ 7 ]
initial
begin
	cd_count_expected[7] = 1'bX;
end 
// expected cd_count[ 6 ]
initial
begin
	cd_count_expected[6] = 1'bX;
end 
// expected cd_count[ 5 ]
initial
begin
	cd_count_expected[5] = 1'bX;
end 
// expected cd_count[ 4 ]
initial
begin
	cd_count_expected[4] = 1'bX;
end 
// expected cd_count[ 3 ]
initial
begin
	cd_count_expected[3] = 1'bX;
end 
// expected cd_count[ 2 ]
initial
begin
	cd_count_expected[2] = 1'bX;
end 
// expected cd_count[ 1 ]
initial
begin
	cd_count_expected[1] = 1'bX;
end 
// expected cd_count[ 0 ]
initial
begin
	cd_count_expected[0] = 1'bX;
end 
// expected counter_baud[ 12 ]
initial
begin
	counter_baud_expected[12] = 1'bX;
end 
// expected counter_baud[ 11 ]
initial
begin
	counter_baud_expected[11] = 1'bX;
end 
// expected counter_baud[ 10 ]
initial
begin
	counter_baud_expected[10] = 1'bX;
end 
// expected counter_baud[ 9 ]
initial
begin
	counter_baud_expected[9] = 1'bX;
end 
// expected counter_baud[ 8 ]
initial
begin
	counter_baud_expected[8] = 1'bX;
end 
// expected counter_baud[ 7 ]
initial
begin
	counter_baud_expected[7] = 1'bX;
end 
// expected counter_baud[ 6 ]
initial
begin
	counter_baud_expected[6] = 1'bX;
end 
// expected counter_baud[ 5 ]
initial
begin
	counter_baud_expected[5] = 1'bX;
end 
// expected counter_baud[ 4 ]
initial
begin
	counter_baud_expected[4] = 1'bX;
end 
// expected counter_baud[ 3 ]
initial
begin
	counter_baud_expected[3] = 1'bX;
end 
// expected counter_baud[ 2 ]
initial
begin
	counter_baud_expected[2] = 1'bX;
end 
// expected counter_baud[ 1 ]
initial
begin
	counter_baud_expected[1] = 1'bX;
end 
// expected counter_baud[ 0 ]
initial
begin
	counter_baud_expected[0] = 1'bX;
end 
// generate trigger
always @(baud_tick_expected or baud_tick or cd_count_expected or cd_count or counter_baud_expected or counter_baud)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected baud_tick = %b | expected cd_count = %b | expected counter_baud = %b | ",baud_tick_expected_prev,cd_count_expected_prev,counter_baud_expected_prev);
	$display("| real baud_tick = %b | real cd_count = %b | real counter_baud = %b | ",baud_tick_prev,cd_count_prev,counter_baud_prev);
`endif
	if (
		( baud_tick_expected_prev !== 1'bx ) && ( baud_tick_prev !== baud_tick_expected_prev )
		&& ((baud_tick_expected_prev !== last_baud_tick_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port baud_tick :: @time = %t",  $realtime);
		$display ("     Expected value = %b", baud_tick_expected_prev);
		$display ("     Real value = %b", baud_tick_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_baud_tick_exp = baud_tick_expected_prev;
	end
	if (
		( cd_count_expected_prev[0] !== 1'bx ) && ( cd_count_prev[0] !== cd_count_expected_prev[0] )
		&& ((cd_count_expected_prev[0] !== last_cd_count_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cd_count[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cd_count_expected_prev);
		$display ("     Real value = %b", cd_count_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_cd_count_exp[0] = cd_count_expected_prev[0];
	end
	if (
		( cd_count_expected_prev[1] !== 1'bx ) && ( cd_count_prev[1] !== cd_count_expected_prev[1] )
		&& ((cd_count_expected_prev[1] !== last_cd_count_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cd_count[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cd_count_expected_prev);
		$display ("     Real value = %b", cd_count_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_cd_count_exp[1] = cd_count_expected_prev[1];
	end
	if (
		( cd_count_expected_prev[2] !== 1'bx ) && ( cd_count_prev[2] !== cd_count_expected_prev[2] )
		&& ((cd_count_expected_prev[2] !== last_cd_count_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cd_count[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cd_count_expected_prev);
		$display ("     Real value = %b", cd_count_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_cd_count_exp[2] = cd_count_expected_prev[2];
	end
	if (
		( cd_count_expected_prev[3] !== 1'bx ) && ( cd_count_prev[3] !== cd_count_expected_prev[3] )
		&& ((cd_count_expected_prev[3] !== last_cd_count_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cd_count[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cd_count_expected_prev);
		$display ("     Real value = %b", cd_count_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_cd_count_exp[3] = cd_count_expected_prev[3];
	end
	if (
		( cd_count_expected_prev[4] !== 1'bx ) && ( cd_count_prev[4] !== cd_count_expected_prev[4] )
		&& ((cd_count_expected_prev[4] !== last_cd_count_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cd_count[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cd_count_expected_prev);
		$display ("     Real value = %b", cd_count_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_cd_count_exp[4] = cd_count_expected_prev[4];
	end
	if (
		( cd_count_expected_prev[5] !== 1'bx ) && ( cd_count_prev[5] !== cd_count_expected_prev[5] )
		&& ((cd_count_expected_prev[5] !== last_cd_count_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cd_count[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cd_count_expected_prev);
		$display ("     Real value = %b", cd_count_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_cd_count_exp[5] = cd_count_expected_prev[5];
	end
	if (
		( cd_count_expected_prev[6] !== 1'bx ) && ( cd_count_prev[6] !== cd_count_expected_prev[6] )
		&& ((cd_count_expected_prev[6] !== last_cd_count_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cd_count[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cd_count_expected_prev);
		$display ("     Real value = %b", cd_count_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_cd_count_exp[6] = cd_count_expected_prev[6];
	end
	if (
		( cd_count_expected_prev[7] !== 1'bx ) && ( cd_count_prev[7] !== cd_count_expected_prev[7] )
		&& ((cd_count_expected_prev[7] !== last_cd_count_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cd_count[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cd_count_expected_prev);
		$display ("     Real value = %b", cd_count_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_cd_count_exp[7] = cd_count_expected_prev[7];
	end
	if (
		( cd_count_expected_prev[8] !== 1'bx ) && ( cd_count_prev[8] !== cd_count_expected_prev[8] )
		&& ((cd_count_expected_prev[8] !== last_cd_count_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cd_count[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cd_count_expected_prev);
		$display ("     Real value = %b", cd_count_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_cd_count_exp[8] = cd_count_expected_prev[8];
	end
	if (
		( cd_count_expected_prev[9] !== 1'bx ) && ( cd_count_prev[9] !== cd_count_expected_prev[9] )
		&& ((cd_count_expected_prev[9] !== last_cd_count_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cd_count[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cd_count_expected_prev);
		$display ("     Real value = %b", cd_count_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_cd_count_exp[9] = cd_count_expected_prev[9];
	end
	if (
		( cd_count_expected_prev[10] !== 1'bx ) && ( cd_count_prev[10] !== cd_count_expected_prev[10] )
		&& ((cd_count_expected_prev[10] !== last_cd_count_exp[10]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cd_count[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cd_count_expected_prev);
		$display ("     Real value = %b", cd_count_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_cd_count_exp[10] = cd_count_expected_prev[10];
	end
	if (
		( cd_count_expected_prev[11] !== 1'bx ) && ( cd_count_prev[11] !== cd_count_expected_prev[11] )
		&& ((cd_count_expected_prev[11] !== last_cd_count_exp[11]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cd_count[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cd_count_expected_prev);
		$display ("     Real value = %b", cd_count_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_cd_count_exp[11] = cd_count_expected_prev[11];
	end
	if (
		( cd_count_expected_prev[12] !== 1'bx ) && ( cd_count_prev[12] !== cd_count_expected_prev[12] )
		&& ((cd_count_expected_prev[12] !== last_cd_count_exp[12]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cd_count[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cd_count_expected_prev);
		$display ("     Real value = %b", cd_count_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_cd_count_exp[12] = cd_count_expected_prev[12];
	end
	if (
		( counter_baud_expected_prev[0] !== 1'bx ) && ( counter_baud_prev[0] !== counter_baud_expected_prev[0] )
		&& ((counter_baud_expected_prev[0] !== last_counter_baud_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port counter_baud[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", counter_baud_expected_prev);
		$display ("     Real value = %b", counter_baud_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_counter_baud_exp[0] = counter_baud_expected_prev[0];
	end
	if (
		( counter_baud_expected_prev[1] !== 1'bx ) && ( counter_baud_prev[1] !== counter_baud_expected_prev[1] )
		&& ((counter_baud_expected_prev[1] !== last_counter_baud_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port counter_baud[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", counter_baud_expected_prev);
		$display ("     Real value = %b", counter_baud_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_counter_baud_exp[1] = counter_baud_expected_prev[1];
	end
	if (
		( counter_baud_expected_prev[2] !== 1'bx ) && ( counter_baud_prev[2] !== counter_baud_expected_prev[2] )
		&& ((counter_baud_expected_prev[2] !== last_counter_baud_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port counter_baud[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", counter_baud_expected_prev);
		$display ("     Real value = %b", counter_baud_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_counter_baud_exp[2] = counter_baud_expected_prev[2];
	end
	if (
		( counter_baud_expected_prev[3] !== 1'bx ) && ( counter_baud_prev[3] !== counter_baud_expected_prev[3] )
		&& ((counter_baud_expected_prev[3] !== last_counter_baud_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port counter_baud[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", counter_baud_expected_prev);
		$display ("     Real value = %b", counter_baud_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_counter_baud_exp[3] = counter_baud_expected_prev[3];
	end
	if (
		( counter_baud_expected_prev[4] !== 1'bx ) && ( counter_baud_prev[4] !== counter_baud_expected_prev[4] )
		&& ((counter_baud_expected_prev[4] !== last_counter_baud_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port counter_baud[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", counter_baud_expected_prev);
		$display ("     Real value = %b", counter_baud_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_counter_baud_exp[4] = counter_baud_expected_prev[4];
	end
	if (
		( counter_baud_expected_prev[5] !== 1'bx ) && ( counter_baud_prev[5] !== counter_baud_expected_prev[5] )
		&& ((counter_baud_expected_prev[5] !== last_counter_baud_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port counter_baud[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", counter_baud_expected_prev);
		$display ("     Real value = %b", counter_baud_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_counter_baud_exp[5] = counter_baud_expected_prev[5];
	end
	if (
		( counter_baud_expected_prev[6] !== 1'bx ) && ( counter_baud_prev[6] !== counter_baud_expected_prev[6] )
		&& ((counter_baud_expected_prev[6] !== last_counter_baud_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port counter_baud[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", counter_baud_expected_prev);
		$display ("     Real value = %b", counter_baud_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_counter_baud_exp[6] = counter_baud_expected_prev[6];
	end
	if (
		( counter_baud_expected_prev[7] !== 1'bx ) && ( counter_baud_prev[7] !== counter_baud_expected_prev[7] )
		&& ((counter_baud_expected_prev[7] !== last_counter_baud_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port counter_baud[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", counter_baud_expected_prev);
		$display ("     Real value = %b", counter_baud_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_counter_baud_exp[7] = counter_baud_expected_prev[7];
	end
	if (
		( counter_baud_expected_prev[8] !== 1'bx ) && ( counter_baud_prev[8] !== counter_baud_expected_prev[8] )
		&& ((counter_baud_expected_prev[8] !== last_counter_baud_exp[8]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port counter_baud[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", counter_baud_expected_prev);
		$display ("     Real value = %b", counter_baud_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_counter_baud_exp[8] = counter_baud_expected_prev[8];
	end
	if (
		( counter_baud_expected_prev[9] !== 1'bx ) && ( counter_baud_prev[9] !== counter_baud_expected_prev[9] )
		&& ((counter_baud_expected_prev[9] !== last_counter_baud_exp[9]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port counter_baud[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", counter_baud_expected_prev);
		$display ("     Real value = %b", counter_baud_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_counter_baud_exp[9] = counter_baud_expected_prev[9];
	end
	if (
		( counter_baud_expected_prev[10] !== 1'bx ) && ( counter_baud_prev[10] !== counter_baud_expected_prev[10] )
		&& ((counter_baud_expected_prev[10] !== last_counter_baud_exp[10]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port counter_baud[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", counter_baud_expected_prev);
		$display ("     Real value = %b", counter_baud_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_counter_baud_exp[10] = counter_baud_expected_prev[10];
	end
	if (
		( counter_baud_expected_prev[11] !== 1'bx ) && ( counter_baud_prev[11] !== counter_baud_expected_prev[11] )
		&& ((counter_baud_expected_prev[11] !== last_counter_baud_exp[11]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port counter_baud[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", counter_baud_expected_prev);
		$display ("     Real value = %b", counter_baud_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_counter_baud_exp[11] = counter_baud_expected_prev[11];
	end
	if (
		( counter_baud_expected_prev[12] !== 1'bx ) && ( counter_baud_prev[12] !== counter_baud_expected_prev[12] )
		&& ((counter_baud_expected_prev[12] !== last_counter_baud_exp[12]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port counter_baud[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", counter_baud_expected_prev);
		$display ("     Real value = %b", counter_baud_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_counter_baud_exp[12] = counter_baud_expected_prev[12];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module BAUD_RATE_GENERATOR_vlg_vec_tst();
// constants                                           
// general purpose registers
reg baud_div_16;
reg [12:0] cd;
reg rst_n;
reg uart_mode_sel;
reg uart_ref_clk;
// wires                                               
wire baud_tick;
wire [12:0] cd_count;
wire [12:0] counter_baud;

wire sampler;                             

// assign statements (if any)                          
BAUD_RATE_GENERATOR i1 (
// port map - connection between master ports and signals/registers   
	.baud_div_16(baud_div_16),
	.baud_tick(baud_tick),
	.cd(cd),
	.cd_count(cd_count),
	.counter_baud(counter_baud),
	.rst_n(rst_n),
	.uart_mode_sel(uart_mode_sel),
	.uart_ref_clk(uart_ref_clk)
);

// rst_n
initial
begin
	rst_n = 1'b1;
	rst_n = #40000 1'b0;
	rst_n = #10000 1'b1;
end 

// baud_div_16
always
begin
	baud_div_16 = 1'b0;
	baud_div_16 = #5000 1'b1;
	#5000;
end 

// uart_ref_clk
always
begin
	uart_ref_clk = 1'b0;
	uart_ref_clk = #1000 1'b1;
	#1000;
end 
// cd[ 12 ]
initial
begin
	cd[12] = 1'b0;
end 
// cd[ 11 ]
initial
begin
	cd[11] = 1'b0;
end 
// cd[ 10 ]
initial
begin
	cd[10] = 1'b0;
end 
// cd[ 9 ]
initial
begin
	cd[9] = 1'b0;
end 
// cd[ 8 ]
initial
begin
	cd[8] = 1'b0;
end 
// cd[ 7 ]
initial
begin
	cd[7] = 1'b0;
end 
// cd[ 6 ]
initial
begin
	cd[6] = 1'b0;
end 
// cd[ 5 ]
initial
begin
	cd[5] = 1'b0;
end 
// cd[ 4 ]
initial
begin
	cd[4] = 1'b0;
end 
// cd[ 3 ]
initial
begin
	cd[3] = 1'b0;
end 
// cd[ 2 ]
initial
begin
	cd[2] = 1'b1;
end 
// cd[ 1 ]
initial
begin
	cd[1] = 1'b0;
end 
// cd[ 0 ]
initial
begin
	cd[0] = 1'b1;
end 

// uart_mode_sel
initial
begin
	uart_mode_sel = 1'b0;
	uart_mode_sel = #160000 1'b1;
	uart_mode_sel = #130000 1'b0;
end 

BAUD_RATE_GENERATOR_vlg_sample_tst tb_sample (
	.baud_div_16(baud_div_16),
	.cd(cd),
	.rst_n(rst_n),
	.uart_mode_sel(uart_mode_sel),
	.uart_ref_clk(uart_ref_clk),
	.sampler_tx(sampler)
);

BAUD_RATE_GENERATOR_vlg_check_tst tb_out(
	.baud_tick(baud_tick),
	.cd_count(cd_count),
	.counter_baud(counter_baud),
	.sampler_rx(sampler)
);
endmodule

